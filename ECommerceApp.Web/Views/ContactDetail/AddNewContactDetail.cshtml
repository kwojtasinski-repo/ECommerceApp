@model ECommerceApp.Application.ViewModels.ContactDetail.NewContactDetailVm

@{
    ViewData["Title"] = "AddNewContactDetailClient";
}

<br />
<div class="form-row">
    <h4>Dodaj kontakt</h4>
</div>


<div class="form-row">
    <div class="col-md-4">
        <form id="contactDetailForm" asp-action="AddNewContactDetail">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="@Model.ContactDetail.Id" value="0" />
            <div class="form-group">
                <label asp-for="@Model.ContactDetail.ContactDetailInformation" class="control-label">Dane</label>
                <input id="ContactDetailInformation" asp-for="@Model.ContactDetail.ContactDetailInformation" class="form-control" />
                <span asp-validation-for="@Model.ContactDetail.ContactDetailInformation" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.ContactDetail.ContactDetailTypeId" class="control-label">Rodzaj kontaktu</label>
                <select id="ContactDetailType" asp-for="@Model.ContactDetail.ContactDetailTypeId" asp-items="@(new SelectList(Model.ContactDetailTypes,"Id", "Name"))" class="custom-select"></select>
                <span asp-validation-for="@Model.ContactDetail.ContactDetailTypeId" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="@Model.ContactDetail.CustomerId" value="@Model.ContactDetail.CustomerId" />
            <div class="form-group">
                <input type="submit" value="Utwórz" class="btn btn-dark" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-route-id="@Model.ContactDetail.CustomerId" asp-action="EditCustomer" asp-controller="Customer">Powrót do danych kontaktowych</a>
</div>

@section Scripts {
    <script>
        const contactDetailFormValidator = {
            formId: "contactDetailForm",
            contactDetailType: {
                controlId: 'ContactDetailType',
                rules: [
                    v => v || 'Niepoprawna wartość'
                ],
                onChange: function (event) {
                    this.value = event.options[event.selectedIndex].value;
                    forms.validControl(contactDetailFormValidator.contactDetailInformation);
                },
                valid: false,
                value: ''
            },
            contactDetailInformation: {
                controlId: 'ContactDetailInformation',
                rules: [
                    v => v && v.trim().length > 0 || 'Dane są wymagane',
                    v => {
                        const error = 'Numer telefonu musi zawierać 9 cyfr';
                        if (!v) {
                            return error;
                        }

                        if (contactDetailFormValidator.contactDetailType.value === '1' && v.trim().length != 9 && isNaN(v)) {
                            return error;
                        }

                        return true;
                    },
                    v => {
                        const error = 'Email zawiera niepoprawny format';
                        if (!v) {
                            return error;
                        }

                        if (contactDetailFormValidator.contactDetailType.value === '2' && !emailRegex.test(v)) {
                            return error;
                        }

                        return true;
                    },
                    v => v && v.trim().length <= 100 || 'Dane nie mogą być dłuższe niż 100 znaków'
                ],
                valid: false,
                value: ''
            }
        };

        $(document).ready(function () {
            forms.initFormValidator(contactDetailFormValidator);
            contactDetailFormValidator.contactDetailType.value = $('#' + contactDetailFormValidator.contactDetailType.controlId).val();
        });
    </script>
}

@model ECommerceApp.Application.ViewModels.Item.NewItemVm

@{
    ViewData["Title"] = "EditItem";
}

<h1>Edycja przedmiotu</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form id="formEditItem" asp-action="EditItem">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" class="form-control" />
            <div class="form-group">
                <label asp-for="Name" class="control-label">Nazwa</label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Cost" class="control-label">Koszt</label>
                <input asp-for="Cost" class="form-control" />
                <span asp-validation-for="Cost" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Opis</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Warranty" class="control-label">Gwarancja</label>
                <input asp-for="Warranty" class="form-control" />
                <span asp-validation-for="Warranty" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label">Ilość w magazynie</label>
                <input asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group col">
                <label asp-for="BrandId" class="control-label">Firma: </label>
                <select asp-for="BrandId" asp-items="@(new SelectList(ViewBag.ItemBrands,"Id", "Name"))" class="custom-select"></select>
                <span asp-validation-for="BrandId" class="text-danger"></span>
            </div>
            <div class="form-group col">
                <label asp-for="TypeId" class="control-label">Typ: </label>
                <select asp-for="TypeId" asp-items="@(new SelectList(ViewBag.ItemTypes,"Id", "Name"))" class="custom-select"></select>
                <span asp-validation-for="TypeId" class="text-danger"></span>
            </div>
            <div>
                <p>List tagów:</p>
                <table id="tagWithJS">
                    @for (int i = 0; i < Model.ItemTags.Count; i++)
                    {
                        <tr id="@i">
                            <td>
                                <input name="Tag" value="@ViewBag.ItemTags[Model.ItemTags[i].TagId-1].Name" class="form-control valid" readonly style="width: 250px;position:static; " />
                                <input type="hidden" name="ItemTags[@i].TagId" value="@Model.ItemTags[i].TagId" class="col-sm-2 col-form-label" />
                                <input type="hidden" name="ItemTags[@i].ItemId" class="form-control" value="@Model.Id" />
                            </td>
                            <td class="col-2">
                                <button onclick="DeleteItem(this.id)" id="@i" type="button" class="btn btn-danger delete">Usuń</button>
                            </td>
                        </tr>
                    }
                </table>
            </div>
            <table id="newrow" style="display:none;">
                <tr id="%">
                    <td>
                        <input name="Tag" value="itemek" class="form-control valid" readonly style="width: 250px;position:static; " />
                        <input type="hidden" name="ItemTags[#].TagId" value="wartosc" class="col-sm-2 col-form-label" />
                        <input type="hidden" name="ItemTags[#].ItemId" class="form-control" value="@Model.Id" />
                    </td>
                    <td class="col-2">
                        <button type="button" class="btn btn-danger delete">Usuń</button>
                    </td>
                </tr>
            </table>
            <!--NEW TAG -->
            <div>
                <select id="TagsMain" style="display:none;" asp-items="@(new SelectList(ViewBag.ItemTags,"Id", "Name"))" class="custom-select"></select>
                <select id="Tags" name="Tags" asp-items="@(new SelectList(ViewBag.ItemTags,"Id", "Name"))" class="custom-select" data-val="true"></select>
                <button type="button" id="add" class="btn btn-info">Wybierz tag</button>
                <input id="indexer" type="hidden" value="0" />
            </div>
            <div class="form-group">
                <input type="submit" value="Zatwierdź" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-md-6 col-md-offset-2">
        @if (Model.Images.Count < 5)
        {
            <div>
                <h4>Dodaj obrazki</h4>
            </div>

            <div>
                <form id="UploadImages" action="/Image/UploadImages?itemId=@Model.Id"
                      enctype="multipart/form-data" onsubmit="return false"
                      method="post">
                    <dl>
                        <dt>
                            <label for="FileUpload_FormFile">Pliki</label>
                        </dt>
                        <dd>
                            <input id="FileUpload_FormFile" multiple="multiple" type="file"
                                   name="files" />
                        </dd>
                    </dl>

                    <input class="btn-block" type="button" value="Wgraj" onclick="Upload(this)" />

                    <div style="margin-top:15px">
                        <output name="result"></output>
                    </div>
                </form>
            </div>
        }

        @if (Model.Images.Count > 0) 
        { 
            <br />
            <h4>Obrazki</h4>
            @foreach (var image in Model.Images)
            {
                <div>
                    <img src="data:image;base64,@System.Convert.ToBase64String(image.ImageSource)" style="display: block; width: auto; max-width: 300px; height: auto; max-height: 300px" />
                </div>
            }
        }
    </div>
</div>

<div>
    <a asp-action="Index">Wróć do listy przedmiotów</a>
</div>

@section Scripts {
    <script>
        var form = $('form');
        var table = $('#tagWithJS');
        var newrow = $('#newrow');
        let index = document.getElementById("indexer").value;
        var copyOfItemTags = document.getElementById("Tags");
        var selectedIndexItemTags = 0;
        var selectedIndex;
        var selectedValue;
        var selectedTableRowInTags;
        var dictOfDeletedValues = {};
        var listIdTags = [];

        $(document).ready(function () {
            if ($('#tagWithJS tr').length > 0) {
                //$('#itemWithJS tr')[i];// list of table rows
                index = $('#tagWithJS tr').length;
                console.log("index");
                console.log(index);
                selectedValue = copyOfItemTags.options[copyOfItemTags.selectedIndex].value;
                if (index > 0) {
                    var assignedValues = [];
                    var collectionValues = $('#tagWithJS')[0].children;
                    console.log(collectionValues[0].children);
                    copyOfItemTags = document.getElementById("Tags");
                    for (i = 0; i < collectionValues[0].children.length; i++) {
                        assignedValues[i] = collectionValues[0].children[i].children[0].children[1].value;
                    }
                    console.log(assignedValues);
                    for (i = 0; i < assignedValues.length; i++) {
                        RemoveSelectOption(assignedValues[i], copyOfItemTags);
                    }
                    console.log("index");
                    console.log(index);
                }
            }
        });

        $('#add').click(function () {
            var amountTags = document.getElementById('Tags').length;
            if (amountTags > 0) {
                var valueOfItemTag = copyOfItemTags.value;
                var cloneTableRow = newrow.find('tr').clone();
                var selectedText = copyOfItemTags.options[copyOfItemTags.selectedIndex].text;
                console.log("index");
                console.log(index);
                selectedIndex = copyOfItemTags.selectedIndex;
                console.log("selectedIndex");
                console.log(selectedIndex);
                cloneTableRow.attr('id', index);
                cloneTableRow.attr("id", index).find("#Tag");
                cloneTableRow.html($(cloneTableRow).html().replace(/\[#\]/g, '[' + index + ']'));
                cloneTableRow.html($(cloneTableRow).html().replace(/"%"/g, '"' + index + '"'));
                cloneTableRow.html($(cloneTableRow).html().replace(/"wartosc"/g, '"' + valueOfItemTag + '"'));
                cloneTableRow.html($(cloneTableRow).html().replace(/"itemek"/g, '"' + selectedText + '"'));
                table.append(cloneTableRow);
                form.data('validator', null);
                index = parseInt(index) + 1;
                $.validator.unobtrusive.parse(form);
                if (selectedIndex > -1) {
                    dictOfDeletedValues[index] = selectedValue;
                    copyOfItemTags.remove(selectedIndex);
                }
            }
        });

        $(document).on('change', 'select', function () {
            selectedIndex = (this).index;
            selectedValue = (this).value;
            var collectionInSelectList = this.children;

            for (i = 0; i < collectionInSelectList.length; i++) {
                if (collectionInSelectList[i].value == selectedValue) {
                    selectedIndex = i;
                }
            }
        });

        $('#tagWithJS').on('click', '.delete', function () {
            selectedTableRowInTags = (this).parentNode.parentNode.attributes.id.value;
            var assignedValuesItemName = [];
            var assignedValuesTagId = [];

            if ($('#tagWithJS tr').length > 0) {
                $("#tagWithJS tr").each(function () {
                    if (this.id) {
                        listIdTags.push(this.id);
                    }
                });
            }

            $(this).closest('tr').remove();
            var id = $(this).closest('tr').attr("id");
            console.log(id);
            var assignedValues = [];
            var idArr = [];

            var trs = document.getElementsByTagName("tr");

            for (var i = 0; i < trs.length -1; i++) {
                idArr.push(trs[i].id);
            }
            if (idArr.length > 0) {
                console.log(idArr);
                console.log("document.getElementById(idArr[0])");
                console.log(document.getElementById(idArr[0]));
                console.log(document.getElementById(idArr[0]).children[0].children[0].value);
                var collectionValues = $('#tagWithJS')[0].children[0].children;
                console.log("collectionValues.length");
                console.log(collectionValues.length);
                console.log("collectionValues");
                console.log(collectionValues);
                var test = collectionValues[0].parentNode.children;
                var test2 = collectionValues[0].parentNode;
                console.log("test");
                console.log(test);
                console.log("test2");
                console.log(test2);
                for (i = 0; i < idArr.length; i++) {
                    assignedValuesItemName[i] = document.getElementById(idArr[i]).children[0].children[0].value;
                    assignedValuesTagId[i] = document.getElementById(idArr[i]).children[0].children[1].value;
                }
                console.log("assignedValues");
                console.log(assignedValues);
                console.log(assignedValuesTagId);
                console.log(assignedValuesItemName);

                listIdTags.splice(id, 1);
                for (i = 0; i < listIdTags.length; i++) {
                    console.log(listIdTags[i]);
                }
                console.log(listIdTags);
                Update(listIdTags);
                console.log("After update\n========");
                for (i = 0; i < listIdTags.length; i++) {
                    console.log(listIdTags[i]);
                }
                console.log(listIdTags);
                var allValues = document.getElementById('TagsMain');
                $('#Tags').empty();
                console.log(allValues);

                for (i = 0; i < allValues.length; i++) {
                    $('#Tags')
                        .append($("<option></option>").attr("value", allValues[i].value).text(allValues[i].text));
                }
                //-------------------------CREATE NEW TABLE ROWS-----------------------------------------
                $('#tagWithJS').empty();

                for (i = 0; i < listIdTags.length; i++) {
                    var cloneTableRow = newrow.find('tr').clone();
                    cloneTableRow.attr('id', listIdTags[i]);
                    cloneTableRow.attr("id", listIdTags[i]).find("#Item");
                    cloneTableRow.html($(cloneTableRow).html().replace(/\[#\]/g, '[' + listIdTags[i] + ']'));
                    cloneTableRow.html($(cloneTableRow).html().replace(/"%"/g, '"' + listIdTags[i] + '"'));
                    cloneTableRow.html($(cloneTableRow).html().replace(/"wartosc"/g, '"' + assignedValuesTagId[i] + '"'));
                    cloneTableRow.html($(cloneTableRow).html().replace(/"itemek"/g, '"' + assignedValuesItemName[i] + '"'));
                    table.append(cloneTableRow);
                }
                //-------------------------CREATE NEW TABLE ROWS-----------------------------------------

                //----------------------DELETE CHOSEN OPTIONS--------------------
                copyOfItemTags = document.getElementById("Tags");
                for (i = 0; i < assignedValuesTagId.length; i++) {
                    //   RemoveSelectOption(i, copyOfItemTags);
                    RemoveSelectOption(assignedValuesTagId[i], copyOfItemTags);
                }
                //----------------------DELETE CHOSEN OPTIONS--------------------
                index = listIdTags.length;
                console.log("index=" + index);
                listIdTags = [];
            }
            else {
                var allValues = document.getElementById('TagsMain');
                $('#Tags').empty();
                console.log(allValues);

                for (i = 0; i < allValues.length; i++) {
                    $('#Tags')
                        .append($("<option></option>").attr("value", allValues[i].value).text(allValues[i].text));
                }
                index = 0;
            }
            
        });

        function DeleteItem(id) {
            console.log("Jestem w delete");
            console.log("id=" + id);
        }

        function Update(listIdTags) {
            for (j = 0; j < listIdTags.length; j++) {
                if (listIdTags[j] != j) {
                    this.listIdTags[j] = j;
                }
            }
        }

        function RemoveSelectOption(valueToDelete, selectList) {
            for (var i = selectList.length - 1; i >= 0; i--) {
                if (selectList.options[i].value == valueToDelete) {
                    selectList.remove(i);
                    console.log(" selectList.options[i].value == valueToDelete.value");
                    console.log(valueToDelete);
                }
                console.log("loop in RemoveSelectOption");
            }
        }


        // --------------------------- SEND IMAGE ---------------------------
        function Upload(input) {
            var uploadForm = document.getElementById("UploadImages");
            AJAXSubmit(uploadForm);
        }

        async function AJAXSubmit(oFormElement) {
            var files = oFormElement[0].files;

            if (parseInt(files.length) > 5) {
                alert("You can only upload a maximum of 5 files");
                return;
            }

            var resultElement = oFormElement.elements.namedItem("result");
            const formData = new FormData(oFormElement);

            try {
                const response = await fetch(oFormElement.action, {
                    
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                   window.location.reload();
                }
                let responseText = await response.text();

                resultElement.value = 'Result: ' + response.status + ' ' +
                    response.statusText + ' ' + responseText;
            } catch (error) {
                console.error('Error:', error);
            }
        }
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

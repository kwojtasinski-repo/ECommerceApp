@using System.Linq;
@using ECommerceApp.Application.DTO;
@model ECommerceApp.Application.DTO.ItemDetailsDto

@{
    ViewData["Title"] = "EditItem";
}

<h1>Edycja przedmiotu</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form id="formEditItem" asp-action="EditItem">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input data-name="itemId" type="hidden" asp-for="Id" class="form-control" />
            <div class="form-group">
                <label asp-for="Name" class="control-label">Nazwa</label>
                <input id="ItemNameInput" asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Cost" class="control-label">Koszt</label>
                <input id="ItemCostInput" asp-for="Cost" class="form-control" />
                <span asp-validation-for="Cost" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Opis</label>
                <textarea id="ItemDescriptionInput" asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Warranty" class="control-label">Gwarancja</label>
                <input id="ItemWarrantyInput" asp-for="Warranty" class="form-control" />
                <span asp-validation-for="Warranty" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label">Ilość w magazynie</label>
                <input id="ItemQuantityInput" asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Brand.Id" class="control-label">Firma: </label>
                <select asp-for="Brand.Id" asp-items="@(new SelectList(ViewBag.ItemBrands,"Id", "Name"))" class="custom-select"></select>
                <span asp-validation-for="Brand.Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Type.Id" class="control-label">Typ: </label>
                <select asp-for="Type.Id" asp-items="@(new SelectList(ViewBag.ItemTypes,"Id", "Name"))" class="custom-select"></select>
                <span asp-validation-for="Type.Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Currency.Id" class="control-label">Waluta: </label>
                <input readonly type="text" class="form-control" value="PLN" />
                <input type="hidden" asp-for="Currency.Id" value="1" />
                <span asp-validation-for="Currency.Id" class="text-danger"></span>
            </div>
            <div>
                <table id="tagsWithJS">
                    <thead>
                        List tagów:
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Tags.Count; i++)
                        {
                            <tr id="@i">
                                <td>
                                    <input name="Tag" value="@((ViewBag.ItemTags as List<TagDto>).FirstOrDefault(t => t.Id == Model.Tags[i].Id).Name)" class="form-control valid" readonly style="width: 250px;position:static; " />
                                    <input id="tagId" type="hidden" name="Tags[@i].Id" value="@Model.Tags[i].Id" />
                                    <input id="tagName" type="hidden" name="Tags[@i].Name" value="@Model.Tags[i].Name" />
                                </td>
                                <td class="col-2">
                                    <button id="@i" type="button" class="btn btn-danger delete">Usuń</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="mt-2 mb-2">
                <select id="Tags" name="TagsToSelect" asp-items="@(new SelectList(ViewBag.ItemTags,"Id", "Name"))" class="custom-select" data-val="true"></select>
                <button type="button" id="add" class="btn btn-info">Wybierz tag</button>
            </div>
            <div class="form-group mt-2 mb-2">
                <input type="submit" value="Zatwierdź" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-md-6 col-md-offset-2">
        @if (Model.Images.Count() < 5)
        {
            <div>
                <h4>Dodaj obrazki</h4>
            </div>

            <div>
                <form id="UploadImages" action="/Image/UploadImages?itemId=@Model.Id"
                      enctype="multipart/form-data" onsubmit="return false"
                      method="post">
                    <dl>
                        <dt>
                            <label for="FileUpload_FormFile">Pliki</label>
                        </dt>
                        <dd>
                            <input id="FileUpload_FormFile" multiple="multiple" type="file"
                                   name="files" />
                        </dd>
                    </dl>

                    <input class="btn-block" type="button" value="Wgraj" onclick="Upload(this)" />

                    <div style="margin-top:15px">
                        <output name="result"></output>
                    </div>
                </form>
            </div>
        }

        @if (Model.Images.Count() > 0) 
        { 
            <br />
            <h4>Obrazki</h4>
            @foreach (var image in Model.Images)
            {
                <div class="card" style="width:18rem;" data-name="ItemImage">
                    <div class="card-body">
                        <button class="btn btn-sm btn-danger" style="margin-left: auto; margin-right: 0;" onclick="DeleteImage(@image.Id)">Usuń</button>
                        <img src="data:image;base64,@image.ImageSource" style="display: block; width: auto; max-width: 15rem; height: auto; max-height: 300px" />
                    </div>
                </div>
            }
        }
    </div>
</div>

<div>
    <a asp-action="Index">Wróć do listy przedmiotów</a>
</div>

@section Scripts {
    <script>
        let tags = [];
        const itemTagsElement = document.getElementById("Tags");
        var selectedIndex = 0;
        var selectedValue;
        const fileUploadId = 'FileUpload_FormFile';

        $(document).ready(function () {
            initTags();
            selectedValue = itemTagsElement?.options[itemTagsElement?.selectedIndex ?? 0]?.value ?? 0;
            forms.initFormValidator(itemFormValidator);
            initItemForm();
        });

        $('#add').click(function () {
            if (selectedIndex < 0) {
                return;
            }

            const tagValue = itemTagsElement.value;
            const selectedText = itemTagsElement.options[itemTagsElement.selectedIndex].text;
            tags.push({ name: selectedText, value: tagValue });

            fillTableWithTags(tags);
            removeUsedTags();
            selectedIndex = 0;
        });

        $(document).on('change', 'select', function () {
            selectedIndex = (this).index;
            selectedValue = (this).value;
            var collectionInSelectList = this.children;

            for (i = 0; i < collectionInSelectList.length; i++) {
                if (collectionInSelectList[i].value == selectedValue) {
                    selectedIndex = i;
                }
            }
        });

        $('#tagsWithJS').on('click', '.delete', function () {
            const tagIndexToDelete = (this).attributes.id.value;
            const rowToDelete = document.querySelectorAll('#tagsWithJS > tbody > tr')[tagIndexToDelete];

            if (!rowToDelete) {
                return;
            }

            const tagId = rowToDelete.querySelector('#tagId');

            if (!tagId) {
                return;
            }

            const tagToAdd = tags.find(t => t.value === tagId.value);
            addDeletedTag(tagToAdd);
            tags = tags.filter(t => t.value !== tagId.value);
            fillTableWithTags(tags);
        });

        function containsValue(array, value) {
            for (const element of array) {
                if (element.value === value) {
                    return true;
                }
            }

            return false;
        }

        function fillTableWithTags(tags) {
            $('#tagsWithJS > tbody').empty();

            for (let i = 0; i < tags.length; i++) {
                const row = createTagRow(tags[i], i.toString());
                const table = $('#tagsWithJS');
                table.append(row);
            }
        }

        function createTagRow(tag, index) {
            const row = document.createElement('tr');
            const dataTag = document.createElement('td');

            const tagNameInput = document.createElement('input');
            tagNameInput.name = "Tag";
            tagNameInput.value = tag.name;
            tagNameInput.className = "form-control valid";
            tagNameInput.readOnly = true;
            tagNameInput.style = "width: 250px;position:static;";
            dataTag.appendChild(tagNameInput);

            const tagIdInput = document.createElement('input');
            tagIdInput.value = tag.value;
            tagIdInput.setAttribute("id", "tagId");
            tagIdInput.type = "hidden";
            tagIdInput.name = "Tags[" + index + "].Id";
            dataTag.appendChild(tagIdInput);

            const dataButton = document.createElement('td');
            const button = buttonTemplate.createButton('Usuń', 'btn btn-danger delete', undefined, 'button', [{ key: "id", value: index }]);
            dataButton.className = "col-2";
            dataButton.appendChild(button);

            row.appendChild(dataTag);
            row.appendChild(dataButton);
            return row;
        }

        function initTags() {
            tags = initUsedTags();
            removeUsedTags();
        }

        function initUsedTags() {
            const tableRows = $('#tagsWithJS tr');
            const usedTags = [];

            if (!tableRows) {
                return usedTags;
            }

            for (let i = 0; i < tableRows.length; i++) {
                const name = tableRows[i].querySelector('[name="Tag"]');
                const id = tableRows[i].querySelector('#tagId');
                if (!name) {
                    continue;
                }
                usedTags.push({ name: name.value, value: id.value });
            }

            return usedTags;
        }

        function removeUsedTags() {
            const tagsSelector = document.querySelector('#Tags');
            for (let i = tagsSelector.length - 1; i >= 0; i--) {
                if (containsValue(tags, tagsSelector[i].value)) {
                    tagsSelector[i].remove();
                }
            }
        }

        function addDeletedTag(tag) {
            $('#Tags').append($("<option></option>").attr("value", tag.value).text(tag.name));
        }

        // --------------------------- SEND IMAGE ---------------------------
        async function Upload(input) {
            var uploadForm = document.getElementById("UploadImages");
            await SendAddImageRequest(uploadForm);
        }

        async function SendAddImageRequest(oFormElement) {
            clearImageUploadValidationErrors();
            const imagesCount = getImageCount();
            var files = oFormElement[0].files;

            if (imagesCount + parseInt(files.length) > maxCountImages) {
                document.getElementById(fileUploadId).parentElement.appendChild(forms.createErrorSpan("Możesz maksymalnie dodać " + maxCountImages + " obrazków"));
                return;
            }

            for (const file of files) {
                const extension = file.name.substring(file.name.lastIndexOf('.'), file.name.length);
                if (!allowedExtensions.some(ext => ext == extension)) {
                    document.getElementById(fileUploadId).parentElement.appendChild(forms.createErrorSpan('Niedozwolony format obrazka ' + extension + '. Dozwolone formaty ' + allowedExtensions.join(',')));
                    return;
                }
            }

            var resultElement = oFormElement.elements.namedItem("result");
            const formData = new FormData(oFormElement);

            try {
                const response = await fetch(oFormElement.action, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                   window.location.reload();
                }
                let responseText = await response.text();

                resultElement.value = 'Result: ' + response.status + ' ' +
                    response.statusText + ' ' + responseText;
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function DeleteImage(id) {
            const result = await modalService.showConfirmationModal('Usuń Obrazek', 'Czy na pewno chcesz usunąć obrazek?');
            if (!result) {
                return;
            }

            await SendDeleteRequest(id);
        }

        async function SendDeleteRequest(id) {
            var imageId = parseInt(id);
            var url = '/Image/DeleteImage/' + imageId;

            try {
                const response = await fetch(url, {
                    method: 'DELETE',
                });
                
                if (response.ok) {
                    window.location.reload();
                }
                let responseText = await response.text();

                resultElement.value = 'Result: ' + response.status + ' ' +
                    response.statusText + ' ' + responseText;
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function getImageCount() {
            const images = document.querySelectorAll('[data-name="ItemImage"]');
            if (!images) {
                return 0;
            }

            return images.length;
        }

        function clearImageUploadValidationErrors() {
            document.getElementById(fileUploadId)
                .parentElement
                .querySelectorAll('.field-validation-invalid')
                .forEach((el) => el.remove());
        }

        const itemFormValidator = {
            formId: "formEditItem",
            name: {
                controlId: 'ItemNameInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Nazwa jest wymagana',
                    v => v && v.trim().length > 2 || 'Nazwa powinnna więcej niż 2 znaki',
                    v => v && v.trim().length <= 100 || 'Nazwa nie może zawierać więcej niż 100 znaków',
                ],
                valid: false,
                value: ''
            },
            cost: {
                controlId: 'ItemCostInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Cena przedmiotu jest wymagana',
                    v => {
                        const value = v?.replace(',', '.');
                        return v && !isNaN(value) || 'Cena przedmiotu zawiera niepoprawny format'
                    },
                    v => {
                        const value = v?.replace(',', '.');
                        return v && Number(value) > 0 || 'Cena przedmiotu powinna być większa niż 0'
                    },
                ],
                valid: false,
                value: ''
            },
            description: {
                controlId: 'ItemDescriptionInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Opis jest wymagany',
                    v => v && v.trim().length > 2 || 'Opis powinien zawierać więcej niż 2 znaki',
                    v => v && v.trim().length <= 255 || 'Opis nie może zawierać więcej niż 255 znaków',
                ],
                valid: false,
                value: ''
            },
            warranty: {
                controlId: 'ItemWarrantyInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Gwarancja jest wymagana',
                    v => v && !isNaN(v) || 'Gwarancja zawiera niepoprawny format',
                    v => v && Number(v) > 0 || 'Gwarancja powinna być większa niż 0',
                ],
                valid: false,
                value: ''
            },
            quantity: {
                controlId: 'ItemQuantityInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Ilość jest wymagana',
                    v => v && !isNaN(v) || 'Ilość zawiera niepoprawny format',
                    v => v && Number(v) > 0 || 'Ilość powinna być większa niż 0',
                ],
                valid: false,
                value: ''
            }
        };

        function initItemForm() {
            itemFormValidator.name.value = document.getElementById(itemFormValidator.name.controlId).value;
            itemFormValidator.cost.value = document.getElementById(itemFormValidator.cost.controlId).value;
            itemFormValidator.description.value = document.getElementById(itemFormValidator.description.controlId).value;
            itemFormValidator.quantity.value = document.getElementById(itemFormValidator.quantity.controlId).value;
            itemFormValidator.warranty.value = document.getElementById(itemFormValidator.warranty.controlId).value;
        }
    </script>
}

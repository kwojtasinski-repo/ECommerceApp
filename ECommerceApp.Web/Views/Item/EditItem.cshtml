@model ECommerceApp.Application.ViewModels.Item.NewItemVm

@{
    ViewData["Title"] = "EditItem";
}

<h1>Edycja przedmiotu</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form id="formEditItem" asp-action="EditItem">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" class="form-control" />
            <div class="form-group">
                <label asp-for="Name" class="control-label">Nazwa</label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Cost" class="control-label">Koszt</label>
                <input asp-for="Cost" class="form-control" />
                <span asp-validation-for="Cost" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Opis</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Warranty" class="control-label">Gwarancja</label>
                <input asp-for="Warranty" class="form-control" />
                <span asp-validation-for="Warranty" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label">Ilość w magazynie</label>
                <input asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group col">
                <label asp-for="BrandId" class="control-label">Firma: </label>
                <select asp-for="BrandId" asp-items="@(new SelectList(ViewBag.ItemBrands,"Id", "Name"))" class="custom-select"></select>
                <span asp-validation-for="BrandId" class="text-danger"></span>
            </div>
            <div class="form-group col">
                <label asp-for="TypeId" class="control-label">Typ: </label>
                <select asp-for="TypeId" asp-items="@(new SelectList(ViewBag.ItemTypes,"Id", "Name"))" class="custom-select"></select>
                <span asp-validation-for="TypeId" class="text-danger"></span>
            </div>
            <div class="form-group col">
                <label asp-for="CurrencyId" class="control-label">Waluta: </label>
                <input readonly type="text" class="form-control" value="PLN" />
                <input type="hidden" asp-for="CurrencyId" value="1" />
                <span asp-validation-for="CurrencyId" class="text-danger"></span>
            </div>
            <div>
                <table id="tagsWithJS">
                    <thead>
                        List tagów:
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.ItemTags.Count; i++)
                        {
                            <tr id="@i">
                                <td>
                                    <input name="Tag" value="@ViewBag.ItemTags[Model.ItemTags[i].TagId-1].Name" class="form-control valid" readonly style="width: 250px;position:static; " />
                                    <input id="tagId" type="hidden" name="ItemTags[@i].TagId" value="@Model.ItemTags[i].TagId" class="col-sm-2 col-form-label" />
                                    <input id="itemId" type="hidden" name="ItemTags[@i].ItemId" class="form-control" value="@Model.Id" />
                                </td>
                                <td class="col-2">
                                    <button id="@i" type="button" class="btn btn-danger delete">Usuń</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <table id="newrow" style="display:none;">
                <tr id="%">
                    <td>
                        <input name="Tag" value="itemek" class="form-control valid" readonly style="width: 250px;position:static; " />
                        <input id="tagId" type="hidden" name="ItemTags[#].TagId" value="wartosc" class="col-sm-2 col-form-label" />
                        <input id="itemId" type="hidden" name="ItemTags[#].ItemId" class="form-control" value="@Model.Id" />
                    </td>
                    <td class="col-2">
                        <button type="button" id="%" class="btn btn-danger delete">Usuń</button>
                    </td>
                </tr>
            </table>
            <!--NEW TAG -->
            <div>
                <select id="TagsMain" style="display:none;" asp-items="@(new SelectList(ViewBag.ItemTags,"Id", "Name"))" class="custom-select"></select>
                <select id="Tags" name="Tags" asp-items="@(new SelectList(ViewBag.ItemTags,"Id", "Name"))" class="custom-select" data-val="true"></select>
                <button type="button" id="add" class="btn btn-info">Wybierz tag</button>
            </div>
            <div class="form-group">
                <input type="submit" value="Zatwierdź" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-md-6 col-md-offset-2">
        @if (Model.Images.Count < 5)
        {
            <div>
                <h4>Dodaj obrazki</h4>
            </div>

            <div>
                <form id="UploadImages" action="/Image/UploadImages?itemId=@Model.Id"
                      enctype="multipart/form-data" onsubmit="return false"
                      method="post">
                    <dl>
                        <dt>
                            <label for="FileUpload_FormFile">Pliki</label>
                        </dt>
                        <dd>
                            <input id="FileUpload_FormFile" multiple="multiple" type="file"
                                   name="files" />
                        </dd>
                    </dl>

                    <input class="btn-block" type="button" value="Wgraj" onclick="Upload(this)" />

                    <div style="margin-top:15px">
                        <output name="result"></output>
                    </div>
                </form>
            </div>
        }

        @if (Model.Images.Count > 0) 
        { 
            <br />
            <h4>Obrazki</h4>
            @foreach (var image in Model.Images)
            {
                <div class="card" style="width:18rem;">
                    <div class="card-body">
                        <button class="btn btn-sm btn-danger" style="margin-left: auto; margin-right: 0;" onclick="DeleteImage(@image.Id)">Usuń</button>
                        <img src="data:image;base64,@System.Convert.ToBase64String(image.ImageSource)" style="display: block; width: auto; max-width: 300px; height: auto; max-height: 300px" />
                    </div>
                </div>
            }
        }
    </div>
</div>

<div>
    <a asp-action="Index">Wróć do listy przedmiotów</a>
</div>

@section Scripts {
    <script>
        var itemTagsElement = document.getElementById("Tags");
        var selectedIndex = 0;
        var selectedValue;

        $(document).ready(function () {
            debugger;
            const tableRows = getAllUsedTags();
            selectedValue = itemTagsElement?.options[itemTagsElement.selectedIndex]?.value ?? 0;
            if (tableRows.length > 0) {
                const allTags = document.querySelector('#TagsMain');
                initTags(allTags, tableRows);
            }
        });

        $('#add').click(function () {
            if (selectedIndex < 0) {
                return;
            }

            const tableBody = document.querySelector('#tagsWithJS > tbody');
            const tableRows = tableBody.querySelectorAll('tr');
            let index = 0;

            if (tableRows.length > 0) {
                index = tableRows.length;
            }

            const valueOfItemTag = itemTagsElement.value;
            const selectedText = itemTagsElement.options[itemTagsElement.selectedIndex].text;
            fillTableWithRow(index, valueOfItemTag, selectedText);
            itemTagsElement.remove(selectedIndex);
            selectedIndex = 0;
        });

        $(document).on('change', 'select', function () {
            selectedIndex = (this).index;
            selectedValue = (this).value;
            var collectionInSelectList = this.children;

            for (i = 0; i < collectionInSelectList.length; i++) {
                if (collectionInSelectList[i].value == selectedValue) {
                    selectedIndex = i;
                }
            }
        });

        $('#tagsWithJS').on('click', '.delete', function () {
            const tagIndexToDelete = (this).attributes.id.value;
            const rowToDelete = document.querySelectorAll('#tagsWithJS > tbody > tr')[tagIndexToDelete];

            if (!rowToDelete) {
                return;
            }

            const tagId = rowToDelete.querySelector('#tagId');

            if (!tagId) {
                return;
            }

            rowToDelete.remove();
            const rows = getAllTagRows();
            $('#tagsWithJS > tbody').empty();
            fillTableWithRows(rows);
            const allTags = document.querySelector('#TagsMain');
            const tags = getAllTags();
            updateTags(allTags, tags, tagId);
        });

        function containsValue(array, value) {
            for (const element of array) {
                if (element.value === value) {
                    return true;
                }
            }

            return false;
        }

        function fillTableWithRow(index, value, text) {
            const copyRow = document.querySelector('#newrow > tbody > tr').cloneNode(true);
            copyRow.setAttribute('id', index);
            copyRow.innerHTML = ($(copyRow).html().replace(/\[#\]/g, '[' + index + ']'));
            copyRow.innerHTML = ($(copyRow).html().replace(/"%"/g, '"' + index + '"'));
            copyRow.innerHTML = ($(copyRow).html().replace(/"wartosc"/g, '"' + value + '"'));
            copyRow.innerHTML = ($(copyRow).html().replace(/"itemek"/g, '"' + text + '"'));
            const table = $('#tagsWithJS');
            table.append(copyRow);
        }

        function getAllTagRows() {
            const rows = [];
            for (const row of document.querySelectorAll('#tagsWithJS > tbody > tr')) {
                rows.push(row);
            }
            return rows;
        }

        function fillTableWithRows(rows) {
            for (let i = 0; i < rows.length; i++) {
                fillTableWithRow(i, rows[i].querySelector('#tagId').value, rows[i].querySelector('[name="Tag"]').value);
            }
        }

        function getAllTags() {
            const tags = [];
            for (const tag of document.querySelector('#Tags')) {
                tags.push(tag);
            }
            return tags;
        }

        function updateTags(tags, tagsToCheck, currentTag) {
            $('#Tags').empty();

            for (let i = 0; i < tags.length; i++) {
                if (tags[i].value === currentTag?.value) {
                    $('#Tags').append($("<option></option>").attr("value", tags[i].value).text(tags[i].text));
                    continue;
                }

                if (!containsValue(tagsToCheck, tags[i].value)) {
                    continue;
                }

                $('#Tags').append($("<option></option>").attr("value", tags[i].value).text(tags[i].text));
            }
        }


        function initTags(tags, tagsToCheck) {
            $('#Tags').empty();

            for (let i = 0; i < tags.length; i++) {
                debugger
                if (containsValue(tagsToCheck, tags[i].value)) {
                    continue;
                }

                $('#Tags').append($("<option></option>").attr("value", tags[i].value).text(tags[i].text));
            }
        }

        function getAllUsedTags() {
            const tableRows = $('#tagsWithJS tr');
            const usedTags = [];

            if (!tableRows) {
                return usedTags;
            }

            for (let i = 0; i < tableRows.length; i++) {
                const name = tableRows[i].querySelector('[name="Tag"]');
                const id = tableRows[i].querySelector('#tagId');
                if (!name) {
                    continue;
                }
                usedTags.push({ name: name.value, value: id.value });
            }

            return usedTags;
        }

        // --------------------------- SEND IMAGE ---------------------------
        function Upload(input) {
            var uploadForm = document.getElementById("UploadImages");
            AJAXSubmit(uploadForm);
        }

        async function AJAXSubmit(oFormElement) {
            var files = oFormElement[0].files;

            if (parseInt(files.length) > 5) {
                alert("You can only upload a maximum of 5 files");
                return;
            }

            var resultElement = oFormElement.elements.namedItem("result");
            const formData = new FormData(oFormElement);

            try {
                const response = await fetch(oFormElement.action, {

                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                   window.location.reload();
                }
                let responseText = await response.text();

                resultElement.value = 'Result: ' + response.status + ' ' +
                    response.statusText + ' ' + responseText;
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function DeleteImage(id) {
            console.log(id);
            var result = confirm("Czy usunąć obrazek?");
            if (result) {
                AJAXDelete(id);
            }
        }

        async function AJAXDelete(id) {
            var imageId = parseInt(id);
            console.log(imageId);
            var url = '/Image/DeleteImage/' + imageId;
            console.log(url);

            try {
                const response = await fetch(url, {
                    method: 'DELETE',
                });
                
                if (response.ok) {
                    window.location.reload();
                }
                let responseText = await response.text();

                resultElement.value = 'Result: ' + response.status + ' ' +
                    response.statusText + ' ' + responseText;
            } catch (error) {
                console.error('Error:', error);
            }
        }

    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

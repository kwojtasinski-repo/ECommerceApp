@using System.Linq;
@using ECommerceApp.Application.DTO
@model ECommerceApp.Application.ViewModels.Item.EditItemVm

@{
    ViewData["Title"] = "EditItem";
}

<h1>Edycja przedmiotu</h1>

<hr />
@if (Model.Item is not null && Model.Item.Id > 0)
{
    <div class="row">
        <div class="col-md-4">
            <form id="formEditItem" asp-action="EditItem">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input data-name="itemId" type="hidden" asp-for="Item.Id" class="form-control" />
                <div class="form-group">
                    <label asp-for="Item.Name" class="control-label">Nazwa</label>
                    <input id="ItemNameInput" asp-for="Item.Name" class="form-control" />
                    <span asp-validation-for="Item.Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Item.Cost" class="control-label">Koszt</label>
                    <input id="ItemCostInput" asp-for="Item.Cost" class="form-control" />
                    <span asp-validation-for="Item.Cost" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Item.Description" class="control-label">Opis</label>
                    <textarea id="ItemDescriptionInput" asp-for="Item.Description" class="form-control"></textarea>
                    <span asp-validation-for="Item.Description" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Item.Warranty" class="control-label">Gwarancja</label>
                    <input id="ItemWarrantyInput" asp-for="Item.Warranty" class="form-control" />
                    <span asp-validation-for="Item.Warranty" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Item.Quantity" class="control-label">Ilość w magazynie</label>
                    <input id="ItemQuantityInput" asp-for="Item.Quantity" class="form-control" />
                    <span asp-validation-for="Item.Quantity" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Item.Brand.Id" class="control-label">Firma: </label>
                    <select id="ItemBrand" asp-for="Item.Brand.Id" asp-items="@(new SelectList(Model.Brands,"Id", "Name"))" class="show-tick form-control data-search"></select>
                    <span asp-validation-for="Item.Brand.Id" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Item.Type.Id" class="control-label">Typ: </label>
                    <select id="ItemType" asp-for="Item.Type.Id" asp-items="@(new SelectList(Model.Types,"Id", "Name"))" class="show-tick form-control data-search"></select>
                    <span asp-validation-for="Item.Type.Id" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Item.Currency.Id" class="control-label">Waluta: </label>
                    <input readonly type="text" class="form-control" value="PLN" />
                    <input type="hidden" asp-for="Item.Currency.Id" value="1" />
                    <span asp-validation-for="Item.Currency.Id" class="text-danger"></span>
                </div>
                <div class="mt-2 mb-2">
                    <select multiple asp-for="ItemTags" asp-items="@(new SelectList(Model.Tags, "Id", "Name"))" class="show-tick form-control data-search"></select>
                </div>
                <div class="form-group mt-2 mb-2">
                    <input type="submit" value="Zatwierdź" class="btn btn-primary" />
                </div>
            </form>
        </div>
        <div class="col-md-6 col-md-offset-2">
            @if (Model.Item.Images.Count() < 5)
            {
                <div>
                    <h4>Dodaj obrazki</h4>
                </div>

                <div>
                    <form id="UploadImages" action="/Image/UploadImages?itemId=@Model.Item.Id"
                        enctype="multipart/form-data" onsubmit="return false"
                        method="post">
                        <dl>
                            <dt>
                                <label for="FileUpload_FormFile">Pliki</label>
                            </dt>
                            <dd>
                                <input id="FileUpload_FormFile" multiple="multiple" type="file"
                                name="files" />
                            </dd>
                        </dl>

                        <input class="btn-block" type="button" value="Wgraj" onclick="Upload(this)" />

                        <div style="margin-top:15px">
                            <output name="result"></output>
                        </div>
                    </form>
                </div>
            }

            @if (Model.Item.Images.Count() > 0)
            {
                <br />
                <h4>Obrazki</h4>
                @foreach (var image in Model.Item.Images)
                {
                    <div class="card" style="width:18rem;" data-name="ItemImage">
                        <div class="card-body">
                            <button class="btn btn-sm btn-danger" style="margin-left: auto; margin-right: 0;" onclick="DeleteImage(@image.Id)">Usuń</button>
                            <img src="data:image;base64,@image.ImageSource" style="display: block; width: auto; max-width: 15rem; height: auto; max-height: 300px" />
                        </div>
                    </div>
                }
            }
        </div>
    </div>
}
else
{
    <p><em>Nie znaleziono przedmiotu</em></p>    
}

<div>
    <a asp-action="Index">Wróć do listy przedmiotów</a>
</div>

@section Scripts {
    <script>
        const fileUploadId = 'FileUpload_FormFile';

        $(document).ready(function () {
            forms.initFormValidator(itemFormValidator);
            initItemForm();
        });

        // --------------------------- SEND IMAGE ---------------------------
        async function Upload(input) {
            var uploadForm = document.getElementById("UploadImages");
            await SendAddImageRequest(uploadForm);
        }

        async function SendAddImageRequest(oFormElement) {
            clearImageUploadValidationErrors();
            const imagesCount = getImageCount();
            var files = oFormElement[0].files;

            if (imagesCount + parseInt(files.length) > maxCountImages) {
                document.getElementById(fileUploadId).parentElement.appendChild(forms.createErrorSpan("Możesz maksymalnie dodać " + maxCountImages + " obrazków"));
                return;
            }

            for (const file of files) {
                const extension = file.name.substring(file.name.lastIndexOf('.'), file.name.length);
                if (!allowedExtensions.some(ext => ext == extension)) {
                    document.getElementById(fileUploadId).parentElement.appendChild(forms.createErrorSpan('Niedozwolony format obrazka ' + extension + '. Dozwolone formaty ' + allowedExtensions.join(',')));
                    return;
                }
            }

            var resultElement = oFormElement.elements.namedItem("result");
            const formData = new FormData(oFormElement);

            try {
                const response = await fetch(oFormElement.action, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                   window.location.reload();
                }
                let responseText = await response.text();

                resultElement.value = 'Result: ' + response.status + ' ' +
                    response.statusText + ' ' + responseText;
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function DeleteImage(id) {
            const result = await modalService.showConfirmationModal('Usuń Obrazek', 'Czy na pewno chcesz usunąć obrazek?');
            if (!result) {
                return;
            }

            await SendDeleteRequest(id);
        }

        async function SendDeleteRequest(id) {
            var imageId = parseInt(id);
            var url = '/Image/DeleteImage/' + imageId;

            try {
                const response = await fetch(url, {
                    method: 'DELETE',
                });
                
                if (response.ok) {
                    window.location.reload();
                }
                let responseText = await response.text();

                resultElement.value = 'Result: ' + response.status + ' ' +
                    response.statusText + ' ' + responseText;
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function getImageCount() {
            const images = document.querySelectorAll('[data-name="ItemImage"]');
            if (!images) {
                return 0;
            }

            return images.length;
        }

        function clearImageUploadValidationErrors() {
            document.getElementById(fileUploadId)
                .parentElement
                .querySelectorAll('.field-validation-invalid')
                .forEach((el) => el.remove());
        }

        const itemFormValidator = {
            formId: "formEditItem",
            name: {
                controlId: 'ItemNameInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Nazwa jest wymagana',
                    v => v && v.trim().length > 2 || 'Nazwa powinnna więcej niż 2 znaki',
                    v => v && v.trim().length <= 100 || 'Nazwa nie może zawierać więcej niż 100 znaków',
                ],
                valid: false,
                value: ''
            },
            cost: {
                controlId: 'ItemCostInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Cena przedmiotu jest wymagana',
                    v => {
                        const value = v?.replace(',', '.');
                        return v && !isNaN(value) || 'Cena przedmiotu zawiera niepoprawny format'
                    },
                    v => {
                        const value = v?.replace(',', '.');
                        return v && Number(value) > 0 || 'Cena przedmiotu powinna być większa niż 0'
                    },
                ],
                valid: false,
                value: ''
            },
            description: {
                controlId: 'ItemDescriptionInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Opis jest wymagany',
                    v => v && v.trim().length > 2 || 'Opis powinien zawierać więcej niż 2 znaki',
                    v => v && v.trim().length <= 255 || 'Opis nie może zawierać więcej niż 255 znaków',
                ],
                valid: false,
                value: ''
            },
            warranty: {
                controlId: 'ItemWarrantyInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Gwarancja jest wymagana',
                    v => v && !isNaN(v) || 'Gwarancja zawiera niepoprawny format',
                    v => v && Number(v) > 0 || 'Gwarancja powinna być większa niż 0',
                ],
                valid: false,
                value: ''
            },
            quantity: {
                controlId: 'ItemQuantityInput',
                rules: [
                    v => v && v.trim().length > 0 || 'Ilość jest wymagana',
                    v => v && !isNaN(v) || 'Ilość zawiera niepoprawny format',
                    v => v && Number(v) > 0 || 'Ilość powinna być większa niż 0',
                ],
                valid: false,
                value: ''
            },
            brandId: {
                controlId: 'ItemBrand',
                rules: [
                    v => v && v.trim().length > 0 || 'Firma jest wymagana',
                    v => v && Number(v) > 0 || 'Firma posiada niepoprawną wartość',
                ],
                valid: false,
                value: ''
            },
            typeId: {
                controlId: 'ItemType',
                rules: [
                    v => v && v.trim().length > 0 || 'Typ jest wymagany',
                    v => v && Number(v) > 0 || 'Typ posiada niepoprawną wartość',
                ],
                valid: false,
                value: ''
            }
        };

        function initItemForm() {
            itemFormValidator.name.value = document.getElementById(itemFormValidator.name.controlId).value;
            itemFormValidator.cost.value = document.getElementById(itemFormValidator.cost.controlId).value;
            itemFormValidator.description.value = document.getElementById(itemFormValidator.description.controlId).value;
            itemFormValidator.quantity.value = document.getElementById(itemFormValidator.quantity.controlId).value;
            itemFormValidator.warranty.value = document.getElementById(itemFormValidator.warranty.controlId).value;
            itemFormValidator.brandId.value = document.getElementById(itemFormValidator.brandId.controlId).value;
            itemFormValidator.typeId.value = document.getElementById(itemFormValidator.typeId.controlId).value;
        }
    </script>
}

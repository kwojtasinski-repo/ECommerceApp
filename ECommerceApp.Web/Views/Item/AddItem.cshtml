@model ECommerceApp.Application.ViewModels.Item.NewItemVm

@{
    ViewData["Title"] = "AddItem";
}

<h1>Dodawanie przedmiotu</h1>


<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddItem">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" class="form-control" />
            <div class="form-group">
                <label asp-for="Name" class="control-label">Nazwa</label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Cost" class="control-label">Koszt</label>
                <input asp-for="Cost" class="form-control" />
                <span asp-validation-for="Cost" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Opis</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Warranty" class="control-label">Gwarancja</label>
                <input asp-for="Warranty" class="form-control" />
                <span asp-validation-for="Warranty" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label">Ilość w magazynie</label>
                <input asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group col">
                <label asp-for="BrandId" class="control-label">Firma: </label>
                <select asp-for="BrandId" asp-items="@(new SelectList(ViewBag.ItemBrands,"Id", "Name"))" class="custom-select"></select>
                <span asp-validation-for="BrandId" class="text-danger"></span>
            </div>
            <p>
                <a asp-action="AddBrand" asp-controller="Brand">Dodaj nową firmę</a>
            </p>
            <div class="form-group col">
                <label asp-for="TypeId" class="control-label">Typ: </label>
                <select asp-for="TypeId" asp-items="@(new SelectList(ViewBag.ItemTypes,"Id", "Name"))" class="custom-select"></select>
                <span asp-validation-for="TypeId" class="text-danger"></span>
            </div>
            <p>
                <a asp-action="AddType" asp-controller="Type">Dodaj nowy typ</a>
            </p>
            <div class="form-group col">
                <label asp-for="CurrencyId" class="control-label">Waluta: </label>
                <input readonly type="text" class="form-control" value="PLN" />
                <input type="hidden" asp-for="CurrencyId" value="1" />
                <span asp-validation-for="CurrencyId" class="text-danger"></span>
            </div>
            <!--NOWY TAG-->
            <table id="tagsWithJS">
                <thead>
                        Tag:
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.ItemTags.Count; i++)
                    {
                        <tr id="@i">
                            <td>
                                <input name="Tag" value="@ViewBag.ItemTags[Model.ItemTags[i].TagId-1].Name" class="form-control valid" readonly style="width: 250px;position:static; " />
                                <input id="tagId" type="hidden" name="ItemTags[@i].TagId" value="@Model.ItemTags[i].TagId" class="col-sm-2 col-form-label" />
                                <input id="itemId" type="hidden" name="ItemTags[@i].ItemId" class="form-control" value="@Model.Id" />
                            </td>
                            <td class="col-2">
                                <button onclick="DeleteItem(this.id)" id="@i" type="button" class="btn btn-danger delete">Usuń</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <!--table>
        <tr class="row" id="ChooseItemTag">
            <td>
                <select id="ItemTags" name="ItemTags[#].TagId" asp-items="@(new SelectList(ViewBag.ItemTags,"Id", "Name"))" class="custom-select" data-val="true" value=""></select>
                <input type="hidden" name="ItemTags[#].ItemId" class="form-control" value="@Model.Id" />
            </td>
        </tr>
    </table-->
            <table id="newrow" style="display:none;">
                <tr id="%">
                    <td>
                        <input name="Tag" value="itemek" class="form-control valid" readonly style="width: 250px;position:static; " />
                        <input id="tagId" type="hidden" name="ItemTags[#].TagId" value="wartosc" class="col-sm-2 col-form-label" />
                        <input id="itemId" type="hidden" name="ItemTags[#].ItemId" class="form-control" value="@Model.Id" />
                    </td>
                    <td class="col-2">
                        <button type="button" id="%" class="btn btn-danger delete">Usuń</button>
                    </td>
                </tr>
            </table>
            <!--NEW TAG -->
            <div>
                <select id="TagsMain" style="display:none;" asp-items="@(new SelectList(ViewBag.ItemTags,"Id", "Name"))" class="custom-select"></select>
                <select id="Tags" name="Tags" asp-items="@(new SelectList(ViewBag.ItemTags,"Id", "Name"))" class="custom-select" data-val="true"></select>
                <button type="button" id="add" class="btn btn-info">Wybierz tag</button>
            </div>
            <br />
            <div class="form-group">
                <input type="submit" value="Utwórz" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Wróć do listy przedmiotów</a>
</div>


@section Scripts {

    <script type="text/javascript">
        var form = $('form');
        var table = $('#tagWithJS');
        var newrow = $('#newrow');
        var copyOfItemTags = document.getElementById("Tags");
        var selectedIndexItemTags = 0;
        var selectedIndex = 0;
        var selectedValue;
        var selectedTableRowInTags;
        var dictOfDeletedValues = {};

        $(document).ready(function () {
            if ($('#tagWithJS tr').length > 0) {
                index = 0;
            }
        });

        $('#add').click(function () {
            if (selectedIndex < 0) {
                return;
            }

            const tableBody = document.querySelector('#tagsWithJS > tbody');
            const tableRows = tableBody.querySelectorAll('tr');
            let index = 0;

            if (tableRows.length > 0) {
                index = tableRows.length;
            }

            const valueOfItemTag = copyOfItemTags.value;
            const selectedText = copyOfItemTags.options[copyOfItemTags.selectedIndex].text;
            fillTableWithRow(index, valueOfItemTag, selectedText);
            copyOfItemTags.remove(selectedIndex);
            selectedIndex = 0;
        });

        $(document).on('change', 'select', function () {
            selectedIndex = (this).index;
            selectedValue = (this).value;
            var collectionInSelectList = this.children;

            for (i = 0; i < collectionInSelectList.length; i++) {
                if (collectionInSelectList[i].value == selectedValue) {
                    selectedIndex = i;
                }
            }
        });

        $('#tagsWithJS').on('click', '.delete', function () {
            debugger;
            const tagIndexToDelete = (this).attributes.id.value;
            const rowToDelete = document.querySelectorAll('#tagsWithJS > tbody > tr')[tagIndexToDelete];

            if (!rowToDelete) {
                return;
            }

            const tagId = rowToDelete.querySelector('#tagId');

            if (!tagId) {
                return;
            }

            rowToDelete.remove();
            const rows = [];
            for (const row of document.querySelectorAll('#tagsWithJS > tbody > tr')) {
                rows.push(row);
            }
            $('#tagsWithJS > tbody').empty();

            for (let i = 0; i < rows.length; i++) {
                const a = rows[i].querySelector('[name="Tag"]').value;
                fillTableWithRow(i, rows[i].querySelector('#tagId').value, rows[i].querySelector('[name="Tag"]').value);
            }

            const allTags = document.querySelector('#TagsMain');
            const tags = [];
            for (const tag of document.querySelector('#Tags')) {
                tags.push(tag);
            }

            $('#Tags').empty();

            for (let i = 0; i < allTags.length; i++) {
                if (allTags[i].value === tagId.value) {
                    $('#Tags').append($("<option></option>").attr("value", allTags[i].value).text(allTags[i].text));
                    continue;
                }

                if (!containsValue(tags, allTags[i].value)) {
                    continue;
                }

                $('#Tags').append($("<option></option>").attr("value", allTags[i].value).text(allTags[i].text));
            }
        });

        function containsValue(array, value) {
            for (const element of array) {
                if (element.value === value) {
                    return true;
                }
            }

            return false;
        }

        function fillTableWithRow(index, value, text) {
            const copyRow = document.querySelector('#newrow > tbody > tr').cloneNode(true);
            copyRow.setAttribute('id', index);
            copyRow.innerHTML = ($(copyRow).html().replace(/\[#\]/g, '[' + index + ']'));
            copyRow.innerHTML = ($(copyRow).html().replace(/"%"/g, '"' + index + '"'));
            copyRow.innerHTML = ($(copyRow).html().replace(/"wartosc"/g, '"' + value + '"'));
            copyRow.innerHTML = ($(copyRow).html().replace(/"itemek"/g, '"' + text + '"'));
            const table = $('#tagsWithJS');
            table.append(copyRow);
        }


        function DeleteItem(id) {
            console.log("Jestem w delete");
            console.log("id=" + id);
        }

        function Update(listIdTags) {
            for (j = 0; j < listIdTags.length; j++) {
                if (listIdTags[j] != j) {
                    this.listIdTags[j] = j;
                }
            }
        }

        function RemoveSelectOption(valueToDelete, selectList) {
            for (var i = selectList.length - 1; i >= 0; i--) {
                if (selectList.options[i].value == valueToDelete) {
                    selectList.remove(i);
                    console.log(" selectList.options[i].value == valueToDelete.value");
                    console.log(valueToDelete);
                }
                console.log("loop in RemoveSelectOption");
            }
        }

    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

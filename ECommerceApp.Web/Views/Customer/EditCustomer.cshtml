@model ECommerceApp.Application.ViewModels.Customer.NewCustomerVm

@{
    ViewData["Title"] = "EditCustomer";
}

<h1>Edycja klienta</h1>

<div>
    <a asp-action="Index">Powrót do listy klientów</a>
</div>
<hr />
<div class="row">
    <form id="customerForm" method="post" asp-action="EditCustomer">
        <div class="form-row col-12">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" class="form-control" />
            <div class="form-group col-5">
                <label asp-for="FirstName" class="control-label">Imię</label>
                <input id="FirstName" asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group col-5">
                <label asp-for="LastName" class="control-label">Nazwisko</label>
                <input id="LastName" asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>

            <div class="form-group form-check col-4"></div><div class="form-group form-check col-6" style=" margin: 0 auto; ">
                <label class="form-check-label">
                    <input id="CompanyEnter" class="form-check-input" asp-for="IsCompany" /> Firma
                </label>
            </div>
            @if (Model.IsCompany)
            {
                <div id="CompanyData" class="form-row col-12 mt-2" style="display:flex;width:100%">
                    <div class="form-group col-5">
                        <label asp-for="NIP" class="control-label"></label>
                        <input id="NIPInput" asp-for="NIP" class="form-control" />
                        <span asp-validation-for="NIP" class="text-danger"></span>
                    </div>
                    <div class="form-group col-5">
                        <label asp-for="CompanyName" class="control-label">Nazwa firmy</label>
                        <input id="CompanyInput" asp-for="CompanyName" class="form-control" />
                        <span asp-validation-for="CompanyName" class="text-danger"></span>
                    </div>
                </div>
            }
            else
            {
                <div id="CompanyData" class="form-row col-12 mt-2" style="display:none;width:100%">
                    <div class="form-group col-5">
                        <label asp-for="NIP" class="control-label"></label>
                        <input id="NIPInput" asp-for="NIP" class="form-control" />
                        <span asp-validation-for="NIP" class="text-danger"></span>
                    </div>
                    <div class="form-group col-5">
                        <label asp-for="CompanyName" class="control-label"></label>
                        <input id="CompanyInput" asp-for="CompanyName" class="form-control" />
                        <span asp-validation-for="CompanyName" class="text-danger"></span>
                    </div>
                </div>
            }

        </div>
        <div class="form-group mt-2">
            <input type="submit" value="Zapisz" class="btn btn-primary" />
        </div>
        <div class="form-row">
            <div class="col">
                <table class="table table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th>
                                Kontakt
                            </th>
                            <th>
                                Rodzaj kontaktu
                            </th>
                            <th>
                                Akcja
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var contact in Model.ContactDetails)
                        {
                        <tr>
                            <td>
                                @Html.DisplayFor(model => contact.ContactDetailInformation)
                            <td>
                                @Html.DisplayFor(model => contact.ContactDetailTypeName)
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm" onclick="deleteContactDetail(@contact.Id)">Usuń</button>
                                <a class="btn btn-info btn-sm" href="@Url.Action("EditContactDetail", "ContactDetail", new { id = contact.Id})">Edytuj</a>
                                <a class="btn btn-info btn-sm" href="@Url.Action("ViewContactDetail", "ContactDetail", new { id = contact.Id})">Szczegóły</a>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
                <button class="btn btn-dark" onclick="location.href='@Url.Action("AddNewContactDetail", "ContactDetail", new { id = Model.Id })'" type="button">Dodaj kontakt</button>
            </div>
        </div>
        <br><br>
        <div class="form-row">
            <div class="col">
                <table class="table table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th>
                                Kraj
                            </th>
                            <th>
                                Kod pocztowy
                            </th>
                            <th>
                                Miasto
                            </th>
                            <th>
                                Ulica
                            </th>
                            <th>
                                Nr budynku
                            </th>
                            <th>
                                Nr mieszkania
                            </th>
                            <th>
                                Akcja
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var address in Model.Addresses)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(model => address.Country)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => address.ZipCode)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => address.City)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => address.Street)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => address.BuildingNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => address.FlatNumber)
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteAddress(@address.Id)">Usuń</button>
                                    <a class="btn btn-info btn-sm" href="@Url.Action("EditAddress", "Address", new { id = address.Id})">Edytuj</a>
                                    <a class="btn btn-info btn-sm" href="@Url.Action("ViewAddress", "Address", new { id = address.Id})">Szczegóły</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <input id="AddAddress" type="button" class="btn btn-dark" value="Dodaj adres" onclick="location.href='@Url.Action("AddAddress", "Address", new { id = Model.Id })'" />
            </div>
        </div>
    </form>
</div>



@section Scripts {
        <script>
            const customerFormValidator = {
                formId: "customerForm",
                hasCompany: false,
                firstName: {
                    controlId: 'FirstName',
                    rules: [
                        v => v && v.trim().length > 0 || 'Imie jest wymagane',
                        v => v && v.trim().length > 2 || 'Imie powinno mieć więcej niż 2 znaki',
                    ],
                    valid: false,
                    value: ''
                },
                lastName: {
                    controlId: 'LastName',
                    rules: [
                        v => v && v.trim().length > 0 || 'Nazwisko jest wymagane',
                        v => v && v.trim().length > 2 || 'Nazwisko powinno mieć więcej niż 2 znaki',
                    ],
                    valid: false,
                    value: ''
                },
                nip: {
                controlId: 'NIPInput',
                    rules: [
                        v => !customerFormValidator.hasCompany || v && v.trim().length > 0 || 'NIP jest wymagany',
                    ],
                    valid: false,
                    value: ''
                },
                company: {
                controlId: 'CompanyInput',
                    rules: [
                        v => !customerFormValidator.hasCompany || v && v.trim().length > 0 || 'Nazwa firmy jest wymagana'
                    ],
                    valid: false,
                    value: ''
                }
            }

            $(document).ready(function () {
                forms.initFormValidator(customerFormValidator);
                customerFormValidator.hasCompany = document.getElementById('CompanyEnter').checked;
                customerFormValidator.firstName.value = document.getElementById(customerFormValidator.firstName.controlId).value;
                customerFormValidator.lastName.value = document.getElementById(customerFormValidator.lastName.controlId).value;
                customerFormValidator.nip.value = document.getElementById(customerFormValidator.nip.controlId).value;
                customerFormValidator.company.value = document.getElementById(customerFormValidator.company.controlId).value;
            });

            $('#CompanyEnter').on('click', function () {
                if (this.checked) {
                    $('#CompanyData').css({ "display": "flex", "width": "100%" });
                    customerFormValidator.hasCompany = true;
                }
                else {
                    $('#CompanyData').css("display", "none");
                    document.getElementById("NIPInput").value = "";
                    document.getElementById("CompanyInput").value = "";
                    customerFormValidator.hasCompany = false;
                }
            });

            async function deleteAddress(id) {
                try {
                    await ajaxRequest.send('/Address/DeleteAddress/' + id, 'DELETE', undefined);
                    window.location.reload();
                } catch (error) {
                    console.error(error);
                }
            }

            async function deleteContactDetail(id) {
                try {
                    await ajaxRequest.send('/ContactDetail/DeleteContactDetail/' + id, 'DELETE', undefined);
                    window.location.reload();
                } catch (error) {
                    console.error(error);
                }
            }

        </script>

        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }

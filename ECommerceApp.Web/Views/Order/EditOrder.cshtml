@model ECommerceApp.Application.ViewModels.Order.NewOrderVm

@{
    ViewData["Title"] = "EditOrder";
}

<div>
    <h1>Edycja zamówienia</h1>

    <hr />
    <div class="row d-flex flex-column">
        <div>
            <form id="EditOrderForm" asp-action="EditOrder">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input data-name="Id" type="hidden" asp-for="Id" class="form-control" />
                <input data-name="UserId" type="hidden" asp-for="UserId" class="form-control" />
                <div class="form-group">
                    <label style="display:none;" asp-for="Number" class="control-label"></label>
                    <label class="control-label">Numer zamówienia</label>
                    <input readonly asp-for="Number" class="form-control" />
                    <span asp-validation-for="Number" class="text-danger"></span>
                </div>
                <div style="display:none;" class="form-group">
                    <label style="display:none;" asp-for="Cost" class="control-label"></label>
                    <label class="control-label">Koszt do zapłaty</label>
                    <input asp-for="Cost" class="form-control" />
                    <span asp-validation-for="Cost" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label style="display:none;" asp-for="Ordered" class="control-label"></label>
                    <label class="control-label">Zamówiono dnia o godzinie</label>
                    <input readonly asp-for="Ordered" class="form-control" />
                    <span asp-validation-for="Ordered" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label style="display:none;" asp-for="Delivered" class="control-label"></label>
                    <label class="control-label">Dostarczono dnia o godzinie</label>
                    <input asp-for="Delivered" class="form-control" />
                    <span asp-validation-for="Delivered" class="text-danger"></span>
                </div>
                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input style="display:none;" class="form-check-input" asp-for="IsDelivered" onclick="return false;" />
                        <input class="form-check-input" asp-for="IsDelivered" /> Dostarczono
                    </label>
                </div>
                <div style="display:none;" class="form-group">
                    <label asp-for="CouponUsedId" class="control-label"></label>
                    <input asp-for="CouponUsedId" class="form-control" /> <!-- select list or js check if it is correct refcode-->
                    <span asp-validation-for="CouponUsedId" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label style="display:none;" asp-for="CustomerId" class="control-label"></label>
                    <label class="control-label">Klient:</label>
                    <select id="CustomerInfoId" asp-for="CustomerId" class="show-tick form-control data-search"></select>
                    <input id="CustomerIdValue" type="hidden" value="@Model.CustomerId" />
                    <span asp-validation-for="CustomerId" class="text-danger"></span>
                </div>
                @if (Model.PaymentId > 0)
                {
                    <div class="form-group">
                        <label style="display:none;" asp-for="PaymentId" class="control-label"></label>
                        <label class="control-label">Nr płatności</label>
                        <input readonly value="@Model.PaymentNumber" class="form-control" />
                        <input type="hidden" asp-for="PaymentId" class="form-control" />
                        <span asp-validation-for="PaymentId" class="text-danger"></span>
                    </div>
                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input type="checkbox" class="form-check-input" asp-for="IsPaid" onclick="return false;" /> Zapłacono
                        </label>
                    </div>
                    @if (Model.RefundId > 0)
                    {
                        <button type="button" class="btn btn-info" onclick="OpenRefundModal()">Edytuj zwrot</button>
                        <div style="top:50px;">
                            <div class="form-group">
                                <label asp-for="RefundId" class="control-label">Powód zwrotu</label>
                                <input type="hidden" readonly id="RefundId" asp-for="RefundId" class="form-control" />
                                <input type="hidden" readonly id="RefundCustomerId" value="@Model.CustomerId" class="form-control" />
                                <input type="hidden" readonly id="RefundOrderId" value="@Model.Id" class="form-control" />
                                <input type="text" id="ReasonRefundText" value="@Model.ReasonRefund" class="form-control" readonly />
                            </div>
                            <div class="form-group form-check">
                                <label class="form-check-label">
                                    <input type="checkbox" class="form-check-input" id="AcceptedRefundChoice" checked="@Model.AcceptedRefund" onclick="return false;" readonly /> Akceptacja zwrotu
                                </label>
                            </div>
                            <div class="form-group form-check">
                                <label class="form-check-label">
                                    <input type="checkbox" class="form-check-input" id="OnWarrantyChoice" checked="@Model.OnWarranty" onclick="return false;" readonly /> Na gwarancji
                                </label>
                            </div>
                        </div>
                        <div>
                            <button class="btn btn-danger" type="button" onclick="DeleteRefund(@Model.RefundId.Value)">
                                Usuń reklamację
                            </button>
                        </div>
                    }
                    else
                    {
                        <button type="button" class="btn btn-info" onclick="OpenRefundModal()">Dodaj zwrot</button>
                    }
                    <div id="RefundEnter" style="display:none;top:50px;">
                        <div class="form-group">
                            <label asp-for="RefundId" class="control-label">Powód zwrotu</label>
                            <input type="hidden" id="RefundId" readonly asp-for="RefundId" class="form-control" />
                            <input type="hidden" readonly id="RefundCustomerId" value="@Model.CustomerId" class="form-control" />
                            <input type="hidden" readonly id="RefundOrderId" value="@Model.Id" class="form-control" />
                            <input type="text" id="ReasonRefundText" value="@Model.ReasonRefund" class="form-control" />
                            <span asp-validation-for="RefundId" class="text-danger"></span>
                        </div>
                        <div class="form-group form-check">
                            <label class="form-check-label">
                                <input type="checkbox" class="form-check-input" id="AcceptedRefundChoice" checked="@Model.AcceptedRefund" onclick="SetCheckedValue(event)" /> Akceptacja zwrotu
                            </label>
                        </div>
                        <div class="form-group form-check">
                            <label class="form-check-label">
                                <input type="checkbox" class="form-check-input" id="OnWarrantyChoice" checked="@Model.OnWarranty" onclick="SetCheckedValue(event)" /> Na gwarancji
                            </label>
                        </div>
                    </div>
                }
                <div class="mt-2 mb-2" data-name="Promotion">
                    <label>Kod promocyjny</label>
                    <input id="RefCode" type="text" asp-for="PromoCode" value="@Model.PromoCode" class="form-control" />
                    <span asp-validation-for="PromoCode" class="text-danger"></span>
                    <div>
                        <button class="btn btn-primary mt-2 mb-2" type="button" onclick="getCouponByCode()">
                            Użyj
                        </button>
                    </div>
                </div>
                <div class="mb-2 mt-2">
                    <p>Przedmioty:</p>
                    <table id="itemWithJS">
                        @for (int i = 0; i < Model.OrderItems.Count; i++)
                        {
                            <tr id="@i">
                                <td>
                                    <input name="Item" value="@Model.OrderItems[i].ItemName" class="form-control valid" readonly style="width: 250px;position:static; " />
                                    <input id="itemId" type="hidden" name="OrderItems[@i].ItemId" value="@Model.OrderItems[i].ItemId" class="col-sm-2 col-form-label" />
                                    <input id="orderId" type="hidden" name="OrderItems[@i].OrderId" class="form-control" value="@Model.Id" />
                                    <input id="orderItemId" type="hidden" name="OrderItems[@i].Id" class="form-control" value="@Model.OrderItems[i].Id" />
                                </td>
                                <td>
                                    <a><i id="OrderItems[@i].ItemOrderQuantity" class="fas fa-plus-circle ml-2 fa-custom add-quantity"></i></a>
                                    <input id="ItemQuantity[@i]" name="OrderItems[@i].ItemOrderQuantity" value="@Model.OrderItems[i].ItemOrderQuantity" readonly style="width: 45px; display: inline !important; margin-left: 4px; margin-right: 4px;" class="form-control" />
                                    <a><i class="fa fa-minus-circle fa-custom remove-quantity" style="margin-right: 4px" id="OrderItems[@i].ItemOrderQuantity"></i></a>
                                    <button id="@i" type="button" class="btn btn-danger delete">Usuń</button>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
                <div>
                    <select id="Items" name="Items" asp-items="@(new SelectList(Model.Items,"Id", "Name"))" class="custom-select" data-val="true"></select>
                    <button type="button" id="add" class="btn btn-info">Wybierz przedmiot</button>
                    <select id="ItemsWithCosts" style="display:none;" name="ItemsCost" asp-items="@(new SelectList(Model.Items, "Id", "Cost"))" class="custom-select"></select>
                </div>
                <table id="RefreshCost">
                    <tr>
                        @if (Model.CustomerId > 0)
                        {
                            <td>
                                Cena: <input id="CalcCost" name="Cost" value="@Model.Cost" readonly style="width: 250px;position:static; " class="form-control" />
                                <input type="hidden" id="Discount" name="Discount" value="@Model.Discount" />
                            </td>
                        }
                    </tr>
                </table>
                <div class="form-group">
                    <input type="submit" value="Zatwierdź" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
    <div class="form-group">
            <a asp-controller="Item" asp-action="Index">Wróć do listy przedmiotów</a>
        @if (!Model.IsPaid)
        {
            @(" | ")<a asp-controller="Payment" asp-action="AddPayment" asp-route-id="@Model.Id">Przejdź do płatności</a>
        }
    </div>
</div>

@section Scripts {
    <script>
        let orderItems = [];
        const orderId = document.querySelector('[data-name="Id"]').value;
        const itemCosts = [];
        const format = (num, decimals) => num.toLocaleString('pl-PL', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
        });

        var table = $('#itemWithJS');
        var itemsSelector = document.getElementById("Items");
        var selectedIndex;
        var selectedValue;

        async function beforePageFullyLoaded() {
            await getUserContacts();
        }

        $(document).on('DOMInitialized', function () {
            initView();
        });

        $('#add').click(function () {
            const tableRows = $('#itemWithJS tr');
            const elements = $('#itemWithJS tr').length;
            selectedIndex = itemsSelector.options[itemsSelector.selectedIndex].index;
            selectedValue = itemsSelector.options[itemsSelector.selectedIndex].value;
            selectedText = itemsSelector.options[itemsSelector.selectedIndex].text;
            const orderItem = { name: selectedText, itemId: selectedValue, orderId, orderItemId: 0, quantity: 1 }
            orderItems.push(orderItem);
            const row = createOrderItemRow(orderItem, elements);
            table.append(row);
            if (selectedIndex > -1) {
                itemsSelector.remove(selectedIndex);
            }
            calculateCosts();
            selectedIndex = 0;
        });

        $(document).on('change', 'select', function () {
            selectedIndex = (this).index;
            selectedValue = (this).value;
            var collectionInSelectList = this.children;

            for (i = 0; i < collectionInSelectList.length; i++) {
                if (collectionInSelectList[i].value == selectedValue) {
                    selectedIndex = i;

                }
            }
        });

        $('#itemWithJS').on('click', '.delete', async function () {
            const selectedTableRow = (this).attributes.id.value;
            const orderItem = orderItems[selectedTableRow];
            await DeleteOrderItem(orderItem.orderItemId);
        });

        $('#itemWithJS').on('click', '.add-quantity', function () {
            const index = this.id.replace('OrderItems[', '').split(']')[0];
            const quantityElement = this.parentNode.parentNode.querySelector('[id="ItemQuantity[' + index + ']"]');
            orderItems[index].quantity += 1;
            quantityElement.value = orderItems[index].quantity;
            calculateCosts();
        });

        $('#itemWithJS').on('click', '.remove-quantity', function () {
            const index = this.id.replace('OrderItems[', '').split(']')[0];
            const quantityElement = this.parentNode.parentNode.querySelector('[id="ItemQuantity[' + index + ']"]');
            if (orderItems[index].quantity === 1) {
                return;
            }

            orderItems[index].quantity -= 1;
            quantityElement.value = orderItems[index].quantity;
            calculateCosts();
        });

        function initView() {
            initOrderItems();
            initItemCosts();
            calculateCosts();
        }

        function calculateCosts() {
            let cost = 0;
            const discount = getDiscount();
            for (const orderItem of orderItems) {
                const itemCost = itemCosts.find(i => i.itemId === orderItem.itemId);
                cost += Number(itemCost?.cost ?? 0) * orderItem.quantity * discount;
            }
            cost = format(cost);
            document.getElementById('CalcCost').value = cost;
        }

        function getDiscount() {
            let discount = Number(document.querySelector('#Discount')?.value ?? 0);
            if (discount <= 0 || discount > 100) {
                return 1;
            }

            discount = 1 - (discount / 100.0);
            return discount;
        }

        function initItemCosts() {
            var itemsCostWithIds = document.getElementById('ItemsWithCosts').options;
            for (const item of itemsCostWithIds) {
                itemCosts.push({ itemId: item.value, cost: Number(item.textContent.replace(",", ".")) });
            }
            for (let i = itemsSelector.options.length - 1; i >= 0; i--) {
                const orderItemExists = orderItems.find(oi => oi.itemId === itemsSelector[i].value);
                if (!orderItemExists) {
                    continue;
                }
                itemsSelector.remove(i);
            }
        }

        function initOrderItems() {
            const tableRows = $('#itemWithJS tr');
            if (tableRows.length === 0) {
                return;
            }

            for (let i = 0; i < tableRows.length; i++) {
                const name = tableRows[i].querySelector('[name="Item"]').value;
                const itemId = tableRows[i].querySelector('#itemId').value;
                const orderId = tableRows[i].querySelector('#orderId').value;
                const orderItemId = tableRows[i].querySelector('#orderItemId').value;
                const quantity = Number(tableRows[i]?.querySelector('[id="ItemQuantity[' + i + ']"]')?.value ?? 0);
                orderItems.push({ name, itemId, orderId, orderItemId, quantity });
            }
        }

        function createOrderItemRow(orderItem, index) {
            const row = document.createElement('tr');
            const dataTag = document.createElement('td');

            const itemNameInput = document.createElement('input');
            itemNameInput.name = "Item";
            itemNameInput.value = orderItem.name;
            itemNameInput.className = "form-control valid";
            itemNameInput.readOnly = true;
            itemNameInput.style = "width: 250px;position:static;";
            dataTag.appendChild(itemNameInput);

            const itemIdInput = document.createElement('input');
            itemIdInput.value = orderItem.itemId;
            itemIdInput.setAttribute("id", "itemId");
            itemIdInput.type = "hidden";
            itemIdInput.name = "OrderItems[" + index + "].ItemId";
            dataTag.appendChild(itemIdInput);

            const orderIdInput = document.createElement('input');
            orderIdInput.value = orderItem.orderId
            orderIdInput.setAttribute("id", "orderId");
            orderIdInput.type = "hidden";
            orderIdInput.name = "OrderItems[" + index + "].OrderId";
            dataTag.appendChild(orderIdInput);

            const idInput = document.createElement('input');
            idInput.value = document.querySelector('[data-name="Id"]')?.value ?? 0;
            idInput.setAttribute("id", "orderItemId");
            idInput.type = "hidden";
            idInput.name = "OrderItems[" + index + "].Id";
            dataTag.appendChild(idInput);

            const dataButton = document.createElement('td');
            const addQuantityAnchor = document.createElement('a');
            const addIcon = document.createElement('i');
            addIcon.setAttribute("id", "OrderItems[" + index + "].ItemOrderQuantity");
            addIcon.className = "fas fa-plus-circle ml-2 fa-custom add-quantity";
            addQuantityAnchor.appendChild(addIcon);
            const inputQuantity = document.createElement('input');
            inputQuantity.setAttribute("id", "ItemQuantity[" + index + "]");
            inputQuantity.name = "OrderItems[" + index + "].ItemOrderQuantity";
            inputQuantity.setAttribute("readonly", true);
            inputQuantity.style = "width: 45px; display: inline !important";
            inputQuantity.className = "form-control ml-2 mr-2";
            inputQuantity.value = orderItem.quantity;
            const deleteQuantityAnchor = document.createElement('a');
            const deleteIcon = document.createElement('i');
            deleteIcon.setAttribute("id", "OrderItems[" + index + "].ItemOrderQuantity");
            deleteIcon.className = "fas fa-minus-circle mr-2 fa-custom remove-quantity";
            deleteQuantityAnchor.appendChild(deleteIcon);
            const button = buttonTemplate.createButton('Usuń', 'btn btn-danger delete', undefined, 'button', [{ key: "id", value: index }]);
            button.id = index;
            dataButton.id = "buttonDelete";
            dataButton.style = "position:relative; top:0px;"
            dataButton.appendChild(addQuantityAnchor);
            dataButton.appendChild(inputQuantity);
            dataButton.appendChild(deleteQuantityAnchor);
            dataButton.appendChild(button);

            row.appendChild(dataTag);
            row.appendChild(dataButton);
            return row;
        }

        async function DeleteOrderItem(id) {
            var orderItemId = parseInt(id);
            var url = '/OrderItem/DeleteOrderItem/' + orderItemId;
            try {
                const response = await fetch(url, {
                    method: 'DELETE',
                });

                if (response.ok) {
                    window.location.reload();
                }
                let responseText = await response.text();

                resultElement.value = 'Result: ' + response.status + ' ' +
                    response.statusText + ' ' + responseText;
                console.log(responseText);
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function SetCheckedValue(event) {
            const value = event.target.getAttribute('checked') ?? event.target.value;
            if (!value || value === "true" || value === "True" || value === 'checked') {
                event.target.setAttribute('checked', false);
            } else {
                event.target.setAttribute('checked', true);
            }
        }

        function OpenRefundModal() {
            const header = modalService.createHeader('Reklamacja');
            const refundBody = document.getElementById("RefundEnter")?.cloneNode(true);
            if (!refundBody) {
                return;
            }

            refundBody.style.display = "block";
            const body = dialogTemplate.createDialogBody(refundBody);
            const confirmButton = buttonTemplate.createButton("Zatwierdź", "btn btn-danger", async () => { await SendRefund(); modalService.close(); }, "type");
            const cancelButton = buttonTemplate.createButton("Anuluj", "btn btn-secondary", () => modalService.close(), "type");
            const footer = dialogTemplate.createDialogFooter([confirmButton, cancelButton]);
            modalService.showCustomModal(header, body, footer);
        }

        async function SendRefund() {
            const modalBody = document.querySelector('.modal-body');
            const form = {
                Id: modalBody.querySelector('#RefundId').value,
                Reason: modalBody.querySelector('#ReasonRefundText').value,
                Accepted: modalBody.querySelector('#AcceptedRefundChoice').checked,
                OnWarranty: modalBody.querySelector('#OnWarrantyChoice').checked,
                CustomerId: modalBody.querySelector('#RefundCustomerId').value,
                OrderId: modalBody.querySelector('#RefundOrderId').value
            }
            if (!form.Id) {
                try {
                    await ajaxRequest.send('/Refund/AddRefund', 'POST', form);
                    window.location.reload();
                } catch (error) {
                    console.error(error);
                }
                return;
            }

            try {
                await ajaxRequest.send('/Refund/UpdateRefund?id=' + form.Id, 'PUT', form);
                window.location.reload();
            } catch (error) {
                console.error(error);
            }
        }

        async function DeleteRefund(id) {
            if (!await modalService.showConfirmationModal('Usuwanie zwrotu', 'Czy na pewno chcesz usunąć zwrot?')) {
                return;
            }

            try {
                await ajaxRequest.send('/Refund/DeleteRefund/' + id, 'DELETE');
                window.location.reload();
            } catch (error) {
                console.error(error);
            }
        }
        
        async function getCouponByCode() {
            clearCoupons();
            const couponCode = document.getElementById('RefCode');
            if (!couponCode || !couponCode.value) {
                const element = createCouponError('Wpisz kod kuponu');
                couponCode.after(element);
                return;
            }

            try {
                const coupon = await ajaxRequest.send('/Coupon/GetByCode?couponCoude=' + couponCode.value, 'GET');
                if (!coupon) {
                    const element = createCouponError('Podano nieprawidłowy kupon');
                    couponCode.after(element);
                    return;
                }
                if (coupon.couponUsedId) {
                    const element = createCouponError('Podano nieprawidłowy kupon');
                    couponCode.after(element);
                    return;
                }
                document.querySelector('#Discount').value = coupon.discount;
                calculateCosts();
                couponCode.after(createSuccessCouponText('Pomyślnie dodano kupon. Cena zmniejszona o ' + coupon.discount + '%'));
            } catch (error) {
                console.error(error);
            }
        }

        function createCouponError(text) {
            const element = forms.createErrorSpan(text);
            element.id = 'CouponCodeError';
            return element;
        }

        function clearCoupons() {
            removeCouponError();
            removeCouponSuccess();
            document.querySelector('#Discount').value = 0;
        }

        function removeCouponError() {
            const promoSection = document.querySelector('[data-name="Promotion"]');
            const errorCode = promoSection.querySelector('#CouponCodeError');
            errorCode?.remove();
        }

        function createSuccessCouponText(text) {
            const span = document.createElement('span');
            span.className = "text-success";
            span.textContent = text;
            span.id = 'CouponAddSuccess';
            return span;
        }

        function removeCouponSuccess() {
            const promoSection = document.querySelector('[data-name="Promotion"]');
            const couponAddSuccess = promoSection.querySelector('#CouponAddSuccess');
            couponAddSuccess?.remove();
        }

        async function getUserContacts() {
            const userId = document.querySelector('[data-name="UserId"]').value;
            const customerId = Number(document.querySelector('#CustomerIdValue').value);
            try {
                const contactsData = await ajaxRequest.send('/Customer/GetContacts?userId=' + userId, 'GET');
                const customersSelect = document.getElementById('CustomerInfoId');
                for (const contactData of contactsData) {
                    const optionTag = document.createElement('option');
                    optionTag.value = contactData.id;
                    optionTag.text = contactData.information;
                    
                    if (contactData.id === customerId) {
                        optionTag.setAttribute('selected', 'selected');
                    }

                    customersSelect.appendChild(optionTag);
                }
            } catch (error) {
                console.error(error);
            }
        }
    </script>
}

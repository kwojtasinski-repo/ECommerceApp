@model ECommerceApp.Application.ViewModels.Order.OrderVm

@{
    ViewData["Title"] = "OrderRealization";
}

<h1>Realizacja zamówienia</h1>

<hr />
@if (Model is not null)
{
    <div class="row">
        <div class="col-lg-6">
            <form id="orderForm" asp-action="OrderRealization">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Order.Id" class="form-control" />
                <input type="hidden" asp-for="Order.Number" class="form-control" />
                <div class="form-group">
                    <label asp-for="Order.Ordered" class="control-label">Data Zamówienia:</label>
                    <input type="text" asp-for="Order.Ordered" class="form-control" readonly/>
                    <span asp-validation-for="Order.Ordered" class="text-danger"></span>
                </div>
                <div class="form-group" style="display:none;">
                    <label asp-for="Order.Delivered" class="control-label"></label>
                    <input asp-for="Order.Delivered" class="form-control" />
                    <span asp-validation-for="Order.Delivered" class="text-danger"></span>
                </div>
                <div class="form-group form-check" style="display:none;">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="Order.IsDelivered" /> @Html.DisplayNameFor(model => model.Order.IsDelivered)
                    </label>
                </div>
                <div class="form-group">
                    <label class="control-label">Użytkownik</label>
                    <input value="@User.Identity.Name" class="form-control" readonly />
                    <input type="hidden" asp-for="Order.UserId" class="form-control" />
                    <span asp-validation-for="Order.UserId" class="text-danger"></span>
                </div>
                <div class="form-group" style="display:none;">
                    <label asp-for="Order.PaymentId" class="control-label"></label>
                    <input asp-for="Order.PaymentId" class="form-control" />
                    <span asp-validation-for="Order.PaymentId" class="text-danger"></span>
                </div>
                <div class="form-group form-check" style="display:none;">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="Order.IsPaid" /> @Html.DisplayNameFor(model => model.Order.IsPaid)
                    </label>
                </div>
                <div class="form-group" style="display:none;">
                    <label asp-for="Order.RefundId" class="control-label"></label>
                    <input asp-for="Order.RefundId" class="form-control" />
                    <span asp-validation-for="Order.RefundId" class="text-danger"></span>
                </div>
                <p>Zamówione przedmioty</p>
                <div class="form-row">
                    <div class="col">
                        <table class="table table-bordered">
                            <thead class="thead-dark">
                                <tr>
                                    <th>
                                        Nazwa
                                    </th>
                                    <th>
                                        Ilość
                                    </th>
                                    <th>
                                        Cena
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.Order.OrderItems.Count; i++)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(model => Model.Order.OrderItems[i].ItemName)
                                            <input type="hidden" asp-for="Order.OrderItems[i].Id" value="@Model.Order.OrderItems[i].Id" class="form-control" />
                                            <input type="hidden" asp-for="Order.OrderItems[i].ItemId" value="@Model.Order.OrderItems[i].ItemId" class="form-control" />
                                            <input type="hidden" asp-for="Order.OrderItems[i].ItemOrderQuantity" value="@Model.Order.OrderItems[i].ItemOrderQuantity" class="form-control" />
                                            <input type="hidden" asp-for="Order.OrderItems[i].UserId" value="@Model.Order.OrderItems[i].UserId" class="form-control" />
                                        </td>
                                        <td class="QuantiyOfItem">
                                            @Html.DisplayFor(model => Model.Order.OrderItems[i].ItemOrderQuantity)
                                        </td>
                                        <td class="CostOfItem">
                                            @Html.DisplayFor(model => Model.Order.OrderItems[i].ItemCost)
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="mt-2 mb-2" data-name="Promotion">
                    <label>Kod promocyjny</label>
                    <input id="RefCode" type="text" asp-for="PromoCode" value="@Model.PromoCode" class="form-control" />
                    <span asp-validation-for="PromoCode" class="text-danger"></span>
                    <div>
                        <button class="btn btn-primary mt-2 mb-2" type="button" onclick="getCouponByCode()">
                            Użyj
                        </button>
                    </div>
                </div>
                <div class="form-row">
                    <div class="col-md-6 mb-4">
                        <label class="control-label">Koszt:</label>
                        <input id="CostCurrency" class="form-control" value="" readonly />
                        <input type="hidden" id="Discount" name="Discount" value="" />
                    </div>
                    <div class="col-md-6 mb-2">
                        <label class="control-label">Waluta:</label>
                        <input type="text" id="CurrencyName" class="form-control" value="PLN" readonly />
                        <input type="hidden" id="Currency" asp-for="Order.CurrencyId" class="form-control" value="1" readonly />
                        <span asp-validation-for="Order.CurrencyId" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group" style="display:none;">
                    <input id="Cost" asp-for="Order.Cost" class="form-control" readonly />
                    <span asp-validation-for="Order.Cost" class="text-danger"></span>
                </div>
                <div class="form-group">
                    @if (Model.Customers.Count > 0)
                    {
                        <label>Czy chcesz zamówić z istniejącymi już danymi?</label>
                        <input type="checkbox" id="ChosenOption" asp-for="CustomerData" class="yes-no-check-text:before" onchange="dataCheckbox(this)" />
                        <div id="ExistingData" style="display:none;">
                            <p>Wybierz istniejące dane:</p>
                            <label asp-for="Order.CustomerId" class="control-label">Klient</label>
                            <select id="SelectListCustomer" asp-for="Order.CustomerId" asp-items="@(new SelectList(Model.Customers, "Id", "Information"))" class="show-tick form-control data-search"></select>
                            <span asp-validation-for="Order.CustomerId" class="text-danger"></span>
                        </div>
                        <div id="NewData">
                            <div class="form-row">
                                <div class="w-100">
                                    <div class="form-row">
                                        <h4>Dane osobowe</h4>
                                    </div>
                                    <div class="form-row">
                                        <input type="hidden" asp-for="NewCustomer.Id" class="form-control" />
                                        <input type="hidden" asp-for="NewCustomer.UserId" value="@Model.Order.UserId" class="form-control" />
                                        <div style="width: 48%; margin-right: 4%;">
                                            <label asp-for="NewCustomer.FirstName" class="control-label">Imię</label>
                                            <input id="CustomerFirstNameInput" asp-for="NewCustomer.FirstName" class="form-control" />
                                            <span asp-validation-for="NewCustomer.FirstName" class="text-danger"></span>
                                        </div>
                                        <div style="width: 48%;">
                                            <label asp-for="NewCustomer.LastName" class="control-label">Nazwisko</label>
                                            <input id="CustomerLastNameInput" asp-for="NewCustomer.LastName" class="form-control" />
                                            <span asp-validation-for="NewCustomer.LastName" class="text-danger"></span>
                                        </div>
                                    </div>
                                    <div class="form-group form-check">
                                        <label class="form-check-label">
                                            <input id="CompanyEnter" class="form-check-input" asp-for="NewCustomer.IsCompany" onchange="toggleCheckbox(this)" /> Firma
                                        </label>
                                    </div>
                                    <div id="CompanyData" class="form-row" style="display:none;">
                                        <div class="mb-3 w-100">
                                            <label asp-for="NewCustomer.NIP" class="control-label"></label>
                                            <input id="NIPInput" asp-for="NewCustomer.NIP" class="form-control" />
                                            <span asp-validation-for="NewCustomer.NIP" class="text-danger"></span>
                                        </div>
                                        <div class="col-md-3 mb-3"></div>
                                        <div class="mb-3 w-100">
                                            <label asp-for="NewCustomer.CompanyName" class="control-label">Nazwa firmy</label>
                                            <input id="CompanyInput" asp-for="NewCustomer.CompanyName" class="form-control" />
                                            <span asp-validation-for="NewCustomer.CompanyName" class="text-danger"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div class="form-row">
                                <div class="col-xs-10 w-100" id="ContactDetails">
                                    <h4>Dane kontaktowe</h4><br />
                                    <div class="row col-8 w-100">
                                        <input type="hidden" asp-for="NewCustomer.ContactDetails[0].CustomerId" />
                                        <label class="col-form-label col-sm-10 pt-0">Rodzaj kontaktu</label>
                                        <input id="typeId" type="hidden" asp-for="NewCustomer.ContactDetails[0].ContactDetailTypeId" class="form-control" value="" />
                                        <div id="ContactDetailType">
                                            <div class="custom-control custom-radio custom-control-inline">
                                                <input type="radio" id="1" value='{ "i": "1", "v": "PhoneNumber" }' name="ContactDetailType" class="custom-control-input" />
                                                <label class="custom-control-label" for="1">Telefon</label>
                                            </div>
                                            <div class="custom-control custom-radio custom-control-inline">
                                                <input type="radio" id="2" value='{ "i": "2", "v": "Email" }' name="ContactDetailType" class="custom-control-input" />
                                                <label class="custom-control-label" for="2">E-mail</label>
                                            </div>
                                        </div>
                                    </div>
                                    <br />
                                    <div class="col-xs-6 mb-3">
                                        <label class="control-label">Dane kontaktowe</label>
                                        <input id="ContactDetailInformationInput" asp-for="NewCustomer.ContactDetails[0].ContactDetailInformation" class="form-control" />
                                        <span asp-validation-for="NewCustomer.ContactDetails[0].ContactDetailInformation" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div class="form-row">
                                <div class="col-xs-6 w-100" id="Adresses">
                                    <input type="hidden" asp-for="NewCustomer.Addresses[0].Id" class="form-control" />
                                    <div>
                                        <h4>Adres</h4><br />
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].Street" class="control-label">Ulica</label>
                                            <input id="AddressStreetInput" asp-for="NewCustomer.Addresses[0].Street" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].Street" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].BuildingNumber" class="control-label">Numer budynku</label>
                                            <input id="AddressBuildingNumberInput" asp-for="NewCustomer.Addresses[0].BuildingNumber" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].BuildingNumber" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].FlatNumber" class="control-label">Numer mieszkania</label>
                                            <input id="AddressFlatNumberInput" asp-for="NewCustomer.Addresses[0].FlatNumber" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].FlatNumber" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].ZipCode" class="control-label">Kod pocztowy</label>
                                            <input id="AddressZipCodeInput" type="text" asp-for="NewCustomer.Addresses[0].ZipCode" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].ZipCode" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].City" class="control-label">Miasto</label>
                                            <input id="AddressCityInput" asp-for="NewCustomer.Addresses[0].City" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].City" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].Country" class="control-label">Województwo</label>
                                            <input id="AddressCountryInput" asp-for="NewCustomer.Addresses[0].Country" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].Country" class="text-danger"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div id="NewData">
                            <div class="form-row">
                                <div class="w-100">
                                    <div class="form-row">
                                        <h4>Dane osobowe</h4>
                                    </div>
                                    <div class="form-row">
                                        <input type="hidden" asp-for="NewCustomer.Id" class="form-control" />
                                        <input type="hidden" asp-for="NewCustomer.UserId" value="@Model.Order.UserId" class="form-control" />
                                        <div style="width: 48%; margin-right: 4%;">
                                            <label asp-for="NewCustomer.FirstName" class="control-label">Imię</label>
                                            <input id="CustomerFirstNameInput" asp-for="NewCustomer.FirstName" name="FirstName" class="form-control" />
                                            <span asp-validation-for="NewCustomer.FirstName" class="text-danger"></span>
                                        </div>
                                        <div style="width: 48%;">
                                            <label asp-for="NewCustomer.LastName" class="control-label">Nazwisko</label>
                                            <input id="CustomerLastNameInput" asp-for="NewCustomer.LastName" class="form-control" />
                                            <span asp-validation-for="NewCustomer.LastName" class="text-danger"></span>
                                        </div>
                                    </div>
                                    <div class="form-group form-check">
                                        <label class="form-check-label">
                                            <input id="CompanyEnter" class="form-check-input" asp-for="NewCustomer.IsCompany" onchange="toggleCheckbox(this)" /> Firma
                                        </label>
                                    </div>
                                    <div id="CompanyData" class="form-row" style="display:none;">
                                        <div class="mb-3 w-100"></div>
                                        <div>
                                            <label asp-for="NewCustomer.NIP" class="control-label"></label>
                                            <input id="NIPInput" asp-for="NewCustomer.NIP" class="form-control" />
                                            <span asp-validation-for="NewCustomer.NIP" class="text-danger"></span>
                                        </div>
                                        <div class="col-md-3 mb-3"></div>
                                        <div class="mb-3 w-100">
                                            <label asp-for="NewCustomer.CompanyName" class="control-label">Nazwa firmy</label>
                                            <input id="CompanyInput" asp-for="NewCustomer.CompanyName" class="form-control" />
                                            <span asp-validation-for="NewCustomer.CompanyName" class="text-danger"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div class="form-row">
                                <div class="col-xs-10 w-100" id="ContactDetailType">
                                    <h4>Dane kontaktowe</h4><br />
                                    <div class="row col-8">
                                        <input type="hidden" asp-for="NewCustomer.ContactDetails[0].CustomerId" />
                                        <label class="col-form-label col-sm-10 pt-0">Rodzaj kontaktu</label>
                                        <input id="typeId" type="hidden" asp-for="NewCustomer.ContactDetails[0].ContactDetailTypeId" class="form-control" value="" />
                                        <div class="custom-control custom-radio custom-control-inline">
                                            <input asp-for="NewCustomer.ContactDetails[0].ContactDetailTypeId" type="radio" id="1" value='{ "i": "1", "v": "PhoneNumber" }' name="ContactDetailType" class="custom-control-input" />
                                            <label class="custom-control-label" for="1">Telefon</label>
                                        </div>
                                        <div class="custom-control custom-radio custom-control-inline">
                                            <input asp-for="NewCustomer.ContactDetails[0].ContactDetailTypeId" type="radio" id="2" value='{ "i": "2", "v": "Email" }' name="ContactDetailType" class="custom-control-input" />
                                            <label class="custom-control-label" for="2">E-mail</label>
                                        </div>
                                    </div>
                                    <br />
                                    <div class="col-xs-6 mb-3">
                                        <label class="control-label">Dane kontaktowe</label>
                                        <input id="ContactDetailInformationInput" asp-for="NewCustomer.ContactDetails[0].ContactDetailInformation" name="ContactDetailInformation" class="form-control" />
                                        <span asp-validation-for="NewCustomer.ContactDetails[0].ContactDetailInformation" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div class="form-row">
                                <div class="col-xs-6 w-100" id="Adresses">
                                    <div>
                                        <h4>Adres</h4><br />
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].Street" class="control-label">Ulica</label>
                                            <input id="AddressStreetInput" asp-for="NewCustomer.Addresses[0].Street" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].Street" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].BuildingNumber" class="control-label">Numer budynku</label>
                                            <input id="AddressBuildingNumberInput" asp-for="NewCustomer.Addresses[0].BuildingNumber" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].BuildingNumber" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].FlatNumber" class="control-label">Numer mieszkania</label>
                                            <input id="AddressFlatNumberInput" asp-for="NewCustomer.Addresses[0].FlatNumber" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].FlatNumber" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].ZipCode" class="control-label">Kod pocztowy</label>
                                            <input id="AddressZipCodeInput" type="text" asp-for="NewCustomer.Addresses[0].ZipCode" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].ZipCode" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].City" class="control-label">Miasto</label>
                                            <input id="AddressCityInput" asp-for="NewCustomer.Addresses[0].City" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].City" class="text-danger"></span>
                                        </div>
                                        <div>
                                            <label asp-for="NewCustomer.Addresses[0].Country" class="control-label">Województwo</label>
                                            <input id="AddressCountryInput" asp-for="NewCustomer.Addresses[0].Country" class="form-control" />
                                            <span asp-validation-for="NewCustomer.Addresses[0].Country" class="text-danger"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="form-group">
                    <input type="submit" value="Utwórz" class="btn btn-primary" style="top:50px;" />
                </div>
            </form>
        </div>
    </div>
}
else
{
    <p><em>Aktualnie nie masz zamówionych przedmiotów lub w koszyku znajdują się przedmioty niedostępne</em></p>
}

<div>
    <a asp-action="Index" asp-controller="Item">Wróć do przedmiotów</a>
</div>

@section Scripts {

    <script>
        var costItems = document.getElementsByClassName('CostOfItem');
        var quantityItems = document.getElementsByClassName('QuantiyOfItem');
        var cost = 0.0;
        const orderFormValidator = {
            formId: "orderForm",
            beforeInitializeFields: function () {
                orderFormValidator.customer.hasCompany = document.getElementById('CompanyEnter').checked;
            },
            customer: {
                useExistingData: false,
                hasCompany: false,
                firstName: {
                    controlId: 'CustomerFirstNameInput',
                    rules: [
                        (v) => orderFormValidator.customer.useExistingData || (v && v.trim().length > 0) || 'Imię jest wymagane',
                        (v) => orderFormValidator.customer.useExistingData || (v && v.trim().length > 2) || 'Imię powinno mieć więcej niż 2 znaki',
                        (v) => orderFormValidator.customer.useExistingData || (v && v.trim().length <= 255) || 'Imię nie może być dłuższe niż 255 znaków'
                    ],
                    valid: false,
                    value: ''
                },
                lastName: {
                    controlId: 'CustomerLastNameInput',
                    rules: [
                        (v) => orderFormValidator.customer.useExistingData || (v && v.trim().length > 0) || 'Nazwisko jest wymagane',
                        (v) => orderFormValidator.customer.useExistingData || (v && v.trim().length > 2) || 'Nazwisko powinno mieć więcej niż 2 znaki',
                        (v) => orderFormValidator.customer.useExistingData || (v && v.trim().length <= 255) || 'Nazwisko nie może być dłuższe niż 255 znaków'
                    ],
                    valid: false,
                    value: ''
                },
                nip: {
                    controlId: 'NIPInput',
                    rules: [
                        (v) => (!(!orderFormValidator.customer.useExistingData && orderFormValidator.customer.hasCompany)) || (v && v.trim().length > 0) || 'NIP jest wymagany',
                        (v) => (!(!orderFormValidator.customer.useExistingData && orderFormValidator.customer.hasCompany)) || (v && v.trim().length === 9) || 'NIP wymaga 9 znaków',
                    ],
                    valid: false,
                    value: ''
                },
                companyName: {
                    controlId: 'CompanyInput',
                    rules: [
                        (v) => (!(!orderFormValidator.customer.useExistingData && orderFormValidator.customer.hasCompany)) || (v && v.trim().length > 0) || 'Nazwa firmy jest wymagana',
                        (v) => (!(!orderFormValidator.customer.useExistingData && orderFormValidator.customer.hasCompany)) || (v && v.trim().length > 2) || 'Nazwa firmy powinna mieć więcej niż 2 znaki',
                        (v) => (!(!orderFormValidator.customer.useExistingData && orderFormValidator.customer.hasCompany)) || (v && v.trim().length <= 255) || 'Nazwa firmy nie może być dłuższa niż 255 znaków'
                    ],
                    valid: false,
                    value: ''
                },
                contactDetailType: {
                    controlId: "ContactDetailType",
                    controlName: "ContactDetailType",
                    rules: [
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length > 0) || 'Rodzaj kontaktu jest wymagany'
                    ],
                    valid: false,
                    value: '',
                    onChange: function(event) {
                        this.value = JSON.parse(event.value)?.i ?? '';
                        const text = this.rules[0](this.value);
                        forms.showValidationError(this.controlId, text && text.length > 0 && text.trim().length > 0 ? text : '');
                        forms.clearValidationError(orderFormValidator.customer.contactDetailInformation.controlId);
                        forms.validControl(orderFormValidator.customer.contactDetailInformation);
                    },
                    onInitializeField: function (field) {
                        const value = $('input[name="ContactDetailType"]:checked').val();
                        if (!value) {
                            return;
                        }
                        field.value = value;
                     }
                },
                contactDetailInformation: {
                    controlId: "ContactDetailInformationInput",
                    rules: [
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length > 0) || 'Dane kontaktowe są wymagane',
                        v => {
                            if (orderFormValidator.customer.useExistingData) {
                                return true;
                            }

                            const error = 'Numer telefonu musi zawierać 9 cyfr';
                            if (!v) {
                                return error;
                            }

                            if (orderFormValidator.customer.contactDetailType.value === '1' && (v.trim().length != 9 || isNaN(v))) {
                                return error;
                            }

                            return true;
                        },
                        v => {
                            if (orderFormValidator.customer.useExistingData) {
                                return true;
                            }

                            const error = 'Email zawiera niepoprawny format';
                            if (!v) {
                                return error;
                            }

                            if (orderFormValidator.customer.contactDetailType.value === '2' && !emailRegex.test(v)) {
                                return error;
                            }

                            return true;
                        },
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length <= 100) || 'Dane nie mogą być dłuższe niż 100 znaków'
                    ],
                    valid: false,
                    value: ''
                },
                addressStreet: {
                    controlId: "AddressStreetInput",
                    rules: [
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length > 0) || 'Ulica jest wymagana',
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length >= 2) || 'Ulica powinna mieć więcej niż 1 znak',
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length <= 255) || 'Ulica nie może mieć więcej niż 255 znaków'
                    ],
                    valid: false,
                    value: ''
                },
                addressBuildingNumber: {
                    controlId: "AddressBuildingNumberInput",
                    rules: [
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length > 0) || 'Nr budynku jest wymagany',
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length <= 100) || 'Nr budynku nie może mieć więcej niż 100 znaków'
                    ],
                    valid: false,
                    value: ''
                },
                addressFlatNumber: {
                    controlId: "AddressFlatNumberInput",
                    rules: [
                        v => orderFormValidator.customer.useExistingData || (!v || (v && v > 0)) || 'Numer budynku nie może być ujemny',
                    ],
                    valid: false,
                    value: ''
                },
                addressZipCode: {
                    controlId: "AddressZipCodeInput",
                    rules: [
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length > 0) || 'Kod pocztowy jest wymagany',
                        v => orderFormValidator.customer.useExistingData || (v && /\d{2}-\d{3}/.test(v)) || 'Kod pocztowy jest niepoprawny, poprawny format 00-000'
                    ],
                    valid: false,
                    value: ''
                },
                addressCity: {
                    controlId: "AddressCityInput",
                    rules: [
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length > 0) || 'Miasto jest wymagane',
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length <= 255) || 'Miasto nie może mieć więcej niż 255 znaków'
                    ],
                    valid: false,
                    value: ''
                },
                addressCountry: {
                    controlId: "AddressCountryInput",
                    rules: [
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length > 0) || 'Województwo jest wymagane',
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length >= 3) || 'Województwo powinno mieć więcej niż 2 znaki',
                        v => orderFormValidator.customer.useExistingData || (v && v.trim().length <= 255) || 'Województwo nie może mieć więcej niż 255 znaków'
                    ],
                    valid: false,
                    value: ''
                }
            },
            beforeSubmit: function () {
                const typeId = document.getElementById('typeId');
                typeId.value = this.customer.contactDetailType.value ? this.customer.contactDetailType.value : "0";
                const customerId = document.getElementById('SelectListCustomer');
                if (!customerId.value || customerId.value.length == 0) {
                    customerId.value = "0";
                }
            }
        }

        $(document).on('DOMInitialized', function () {
            if ($('#orderForm').length === 0) {
                return;
            }

            const cost = calculateCosts();
            document.getElementById('Cost').value = Number(cost);
            document.getElementById('CostCurrency').value = formatPln(cost);
            forms.initFormValidator(orderFormValidator);
        });

        function toggleCheckbox(element) {
            if (element.checked) {
                orderFormValidator.customer.hasCompany = true;
                $('#CompanyData').css("display", "block");
            }
            else {
                $('#CompanyData').css("display", "none");
                document.getElementById("NIPInput").value = "";
                document.getElementById("CompanyInput").value = "";
                orderFormValidator.customer.hasCompany = false;
                customerFormValidator.company.value = "";
                customerFormValidator.nip.value = "";
            }
        }

        function dataCheckbox(element) {
            if (element.checked) {
                $('#ExistingData').css("display", "block");
                $('#NewData').css("display", "none");
                orderFormValidator.customer.useExistingData = true;
            }
            else {
                $('#ExistingData').css("display", "none");
                $('#NewData').css("display", "block");
                orderFormValidator.customer.useExistingData = false;
            }
        }

        async function getCouponByCode() {
            clearCoupons();
            const couponCode = document.getElementById('RefCode');
            if (!couponCode || !couponCode.value) {
                const element = createCouponError('Wpisz kod kuponu');
                couponCode.after(element);
                return;
            }

            try {
                const coupon = await ajaxRequest.send('/Coupon/GetByCode?couponCoude=' + couponCode.value, 'GET');
                if (!coupon) {
                    const element = createCouponError('Podano nieprawidłowy kupon');
                    couponCode.after(element);
                    return;
                }
                if (coupon.couponUsedId) {
                    const element = createCouponError('Podano nieprawidłowy kupon');
                    couponCode.after(element);
                    return;
                }
                document.querySelector('#Discount').value = coupon.discount;
                const cost = calculateCosts();
                document.getElementById('CostCurrency').value = formatPln(cost);
                document.getElementById('Cost').value = Number(cost);
                couponCode.after(createSuccessCouponText('Pomyślnie dodano kupon. Cena zmniejszona o ' + coupon.discount + '%'));
            } catch (error) {
                console.error(error);
            }
        }

        function createCouponError(text) {
            const element = forms.createErrorSpan(text);
            element.id = 'CouponCodeError';
            return element;
        }

        function clearCoupons() {
            removeCouponError();
            removeCouponSuccess();
            document.querySelector('#Discount').value = 0;
        }

        function removeCouponError() {
            const promoSection = document.querySelector('[data-name="Promotion"]');
            const errorCode = promoSection.querySelector('#CouponCodeError');
            errorCode?.remove();
        }

        function createSuccessCouponText(text) {
            const span = document.createElement('span');
            span.className = "text-success";
            span.textContent = text;
            span.id = 'CouponAddSuccess';
            return span;
        }

        function removeCouponSuccess() {
            const promoSection = document.querySelector('[data-name="Promotion"]');
            const couponAddSuccess = promoSection.querySelector('#CouponAddSuccess');
            couponAddSuccess?.remove();
        }

        function calculateCosts() {
            let cost = 0;
            const discount = getDiscount();
            for (i = 0; i < costItems.length; i++) {
                var quantity = Number(quantityItems[i].innerText);
                var currency = costItems[i].children[0].textContent.replace(" zł", "").replace(",", ".");
                var number = Number(currency.replace(/[^0-9.-]+/g, "")) * quantity;
                cost += number * discount;
            }
            return cost;
        }

        function getDiscount() {
            let discount = Number(document.querySelector('#Discount')?.value ?? 0);
            if (discount <= 0 || discount > 100) {
                return 1;
            }

            discount = 1 - (discount / 100.0);
            return discount;
        }

    </script>

    <style type="text/css">
        .yes-no-check-text:before {
            content: 'Nie';
        }

        .yes-no-check-input:checked ~ .yes-no-check-text:before {
            content: 'Tak';
        }
    </style>
}

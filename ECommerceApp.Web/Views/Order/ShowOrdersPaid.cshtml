@using ECommerceApp.Application.Permissions;
@model ECommerceApp.Application.ViewModels.Order.ListForOrderVm

@{
    ViewData["Title"] = "ShowOrdersPaid";
}


<h1>Wydania</h1>


<form id="search-form" asp-action="ShowOrdersPaid" asp-controller="Order" method="post">
    <div class="row">
        <input type="text" asp-for="SearchString" name="searchString" id="searchString" />
        <input type="submit" value="Wyszukaj" />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Id
                </th>
                <th>
                    Nr zamówienia
                </th>
                <th>
                    Data zamówienia
                </th>
                <th>
                    Data dostarczenia
                </th>
                <th>
                    Czy dostarczono
                </th>
                <th>
                    Id zamawiającego
                </th>
                <th>
                    Id płatności
                </th>
                <th>
                    Czy zapłacono
                </th>
                <th>Akcja</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Model.Orders)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => order.Id)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => order.Number)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => order.Ordered)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => order.Delivered)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => order.IsDelivered)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => order.UserId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => order.PaymentId)
                    </td>
                     <td>
                        @Html.DisplayFor(modelItem => order.IsPaid)
                    </td>
                    <td>
                        <a class="anchor-link" onclick="DispatchOrder(@order.Id)">Wyślij zamówienie</a>
                        @if (User.IsInRole(UserPermissions.Roles.Administrator) || User.IsInRole(UserPermissions.Roles.Manager) || User.IsInRole(UserPermissions.Roles.Service))
                        {
                            @(' ')@('|')@(' ')
                            @Html.ActionLink("Edytuj", "EditOrder", new { id = order.Id }) @(' ')@('|')@(' ')
                            @Html.ActionLink("Szczegóły", "ViewOrderDetails", new { id = order.Id })
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="row">
        <table>
            <tr>
                @for (int i = 1; i <= Math.Ceiling(Model.Count / (double)Model.PageSize); i++)
                {
                    <td>
                        @if (i != Model.CurrentPage)
                        {
                            <a href='javascript:PagerClick(@i, "search-form")'>@i</a>
                        }
                        else
                        {
                            <span>@i</span>
                        }
                    </td>
                }
            </tr>
        </table>
        <input type="hidden" name="pageNo" id="pageNo" />
        <input type="hidden" name="pageSize" id="pageSize" value="20" />
    </div>
</form>

@section Scripts
{
    <script type="text/javascript">
        async function DispatchOrder(id) {
            try {
                await ajaxRequest.send("/Order/DispatchOrder?id="+id, "PATCH");
                window.location.reload();
            } catch (error) {
                if (error.status === statusCodes.Unauthorized) {
                    window.location.href = "Identity/Account/Login";
                }
                if (error.status === statusCodes.InternalErrorServer) {
                    showError([{ code: 'generalError' }]);
                }
                if (error.status === statusCodes.BadRequest) {
                    showErrorFromResponse(error);
                }
            }
        }
    </script>
}
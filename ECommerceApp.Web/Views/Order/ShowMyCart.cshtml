@using ECommerceApp.Application
@model ECommerceApp.Application.ViewModels.OrderItem.ListForOrderItemVm

@{
    ViewData["Title"] = "ShowMyCard";
}

<h1>Koszyk</h1>

<p>
    <a asp-controller="Item" asp-action="Index">Wróć do listy przedmiotów</a>
</p>
@if (Model.ItemOrders is null || Model.ItemOrders.Count == 0)
{
    <p><em>Aktualnie nie masz przedmiotów w koszyku</em></p>
}
else
{
    @if (Model.ItemOrders.Any(oi => oi.ItemQuantityAvailable <= 0 || oi.ItemQuantityAvailable < oi.ItemOrderQuantity))
    {
        <div class="alert alert-danger">
            @foreach (var orderItem in Model.ItemOrders.Where(oi => oi.ItemQuantityAvailable <= 0 || oi.ItemQuantityAvailable < oi.ItemOrderQuantity))
            {
                @if (orderItem.ItemQuantityAvailable <= 0)
                {
                    <p><em>Przedmiot <b>@orderItem.ItemName</b> nie może zostać użyty podczas zamawiania, gdyż nie jest dostępny</em></p>
                }
                else if (orderItem.ItemQuantityAvailable < orderItem.ItemOrderQuantity)
                {
                    <p><em>Przedmiot o nazwie <b>@orderItem.ItemName</b> można maksymalnie można zamówić w ilości <b>@orderItem.ItemQuantityAvailable</b></em></p>
                }
            }
        </div>
    }

    <table id="search-form" class="table">
        <thead>
            <tr>
                <th>
                    Id
                </th>
                <th>
                    Id przedmiotu
                </th>
                <th>
                    Nazwa przedmiotu
                </th>
                <th>
                    Ilość
                </th>
                <th>
                    Id użytkownika
                </th>
                <th>
                    Użytkownik
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var orderItem in Model.ItemOrders)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(model => orderItem.Id)
                    </td>
                    <td>
                        @Html.DisplayFor(model => orderItem.ItemId)
                    </td>
                    <td>
                        @Html.ActionLink($"{orderItem.ItemName}", "ViewItem", "Item", new { id = orderItem.ItemId })
                    </td>
                    <td style="width:100px;">
                        <div class="row item-info">
                            <a><i style="margin-right:5px;" onclick="AddQuantity(@orderItem.Id, @orderItem.ItemId, @orderItem.ItemOrderQuantity)" id="OrderItemAddQuantity" class="fas fa-plus-circle ml-2 fa-custom"></i></a>
                            <span id="ItemQuantity">@Html.DisplayFor(model => orderItem.ItemOrderQuantity)</span>
                            <input type="hidden" id="ItemCost" value="@(orderItem.ItemCost)" />
                            <a><i onclick="RemoveQuantity(@orderItem.Id, @orderItem.ItemId, @orderItem.ItemOrderQuantity)" class="fa fa-minus-circle ml-2 fa-custom" id="OrderItemRemoveQuantity"></i></a>
                        </div>
                    </td>
                    <td>
                        @Html.DisplayFor(model => orderItem.UserId)
                    </td>
                    <td>
                        @User.Identity.Name
                    </td>
                    <td>
                        <a class="anchor-link" onclick="RemoveItemFromCart(@orderItem.Id)">Usuń</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <table class="table d-flex justify-content-end mt-4 mb-2">
        <tbody>
            <tr>
                <th>Do zapłaty:</th>
                <td id="SummaryCost"></td>
                <td>PLN</td>
            </tr>
        </tbody>
    </table>
     <div class="row">
        <table>
            <tr>
                @for (int i = 1; i <= Math.Ceiling(Model.Count / (double)Model.PageSize); i++)
                {
                    <td>
                        @if (i != Model.CurrentPage)
                        {
                            <a href='javascript:PagerClick(@i, "search-form")'>@i</a>
                        }
                        else
                        {
                            <span>@i</span>
                        }
                    </td>
                }
            </tr>
        </table>
    </div>
    <input type="hidden" name="pageNo" id="pageNo" />
    <input type="hidden" name="pageSize" id="pageSize" value="20" />
    <div class="form-group">
        @if (Model.ItemOrders.Any(oi => oi.ItemQuantityAvailable <= 0))
        {
            <input type="button" readonly value="Zrealizuj zamówienie" class="btn btn-primary" disabled="disabled"/>
        }
        else if (Model.ItemOrders.Any(oi => oi.ItemQuantityAvailable < oi.ItemOrderQuantity))
        {
            <input type="button" readonly value="Zrealizuj zamówienie" class="btn btn-primary" disabled="disabled" />
        }
        else 
        {
            <a asp-controller="Order" asp-action="OrderRealization"><input type="button" readonly value="Zrealizuj zamówienie" class="btn btn-primary" /></a>
        }
        <a asp-controller="Item" asp-action="Index"><input type="button" readonly value="Zrealizuj później" class="btn btn-primary" /></a>
    </div>
}

@section Scripts
{
    <script>
        async function AddQuantity(id, itemId, quantity) {
            try {
                const objectJson = JSON.stringify({
                    "id": id,
                    "itemId": itemId,
                    "itemOrderQuantity": quantity + 1,
                    "userId": "@User.GetUserId()"
                })
                await ajaxRequest.send("/OrderItem/UpdateOrderItem/?id=" + id, "PUT", objectJson, "application/json", "json");
                location.reload();
            } catch (error) {
                if (error.status === statusCodes.Unauthorized) {
                    window.location.href = "Identity/Account/Login";
                }
                if (error.status === statusCodes.InternalErrorServer) {
                    showError([{ code: 'generalError' }]);
                }
                if (error.status === statusCodes.BadRequest) {
                    showErrorFromResponse(error);
                }
            }
        }

        async function RemoveQuantity(id, itemId, quantity) {
            if (quantity <= 1) {
                return;
            }

            try {
                const objectJson = JSON.stringify({
                    "id": id,
                    "itemId": itemId,
                    "itemOrderQuantity": quantity - 1,
                    "userId": "@User.GetUserId()"
                })
                await ajaxRequest.send("/OrderItem/UpdateOrderItem/?id=" + id, "PUT", objectJson, "application/json", "json");
                location.reload();
            } catch (error) {
                if (error.status === statusCodes.Unauthorized) {
                    window.location.href = "Identity/Account/Login";
                }
                if (error.status === statusCodes.InternalErrorServer) {
                    showError([{ code: 'generalError' }]);
                }
                if (error.status === statusCodes.BadRequest) {
                    showErrorFromResponse(error);
                }
            }
        }

        async function RemoveItemFromCart(itemId) {
            try {
                await ajaxRequest.send("/OrderItem/DeleteOrderItem/" + itemId, "DELETE", undefined, "application/json", "json");
                location.reload();
            } catch (error) {
                if (error.status === statusCodes.Unauthorized) {
                    window.location.href = "Identity/Account/Login";
                }
                if (error.status === statusCodes.InternalErrorServer) {
                    showError([{ code: 'generalError' }]);
                }
                if (error.status === statusCodes.BadRequest) {
                    showErrorFromResponse(error);
                }
            }
         }


        $(document).on('DOMInitialized', function () {
            const summaryCost = document.querySelector('[id="SummaryCost"]');
            if (!summaryCost) {
                return;
            }

            const elements = $('.item-info');
            let value = 0.0;
            for (const element of elements) {
                const quantity = Number(element.querySelector('#ItemQuantity')?.textContent ?? 0);
                const cost = Number(element.querySelector('#ItemCost')?.value?.replace(',','.') ?? 0);
                value += quantity * cost;
            }
            summaryCost.textContent = value;
        });

    </script>
}

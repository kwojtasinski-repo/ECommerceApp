@model ECommerceApp.Application.ViewModels.Order.NewOrderVm

@{
    ViewData["Title"] = "AddOrderDetails";
}

<h1>Dodawnie szczegółów zamówienia</h1>

<hr />
<div class="row">
    <div class="col-lg-6">
        <form asp-action="AddOrderDetails" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" class="form-control" />
            <input type="hidden" asp-for="UserId" class="form-control" />
            <div class="form-group">
                <label asp-for="Number" class="control-label">Numer zamówienia</label>
                <input asp-for="Number" class="form-control" readonly />
                <span asp-validation-for="Number" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="Cost" class="control-label"></label>
                <input asp-for="Cost" class="form-control" />
                <span asp-validation-for="Cost" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Ordered" class="control-label">Zamówiono dnia o godzinie</label>
                <input asp-for="Ordered" class="form-control" readonly />
                <span asp-validation-for="Ordered" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="Delivered" class="control-label"></label>
                <input asp-for="Delivered" class="form-control" />
                <span asp-validation-for="Delivered" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsDelivered" /> @Html.DisplayNameFor(model => model.IsDelivered)
                </label>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="CouponUsedId" class="control-label"></label>
                <input asp-for="CouponUsedId" class="form-control" />
                <span asp-validation-for="CouponUsedId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CustomerId" class="control-label">Klient</label>
                <input value="@ViewBag.CustomerInformation" class="form-control" readonly />
                <span asp-validation-for="CustomerId" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="PaymentId" class="control-label"></label>
                <input asp-for="PaymentId" class="form-control" />
                <span asp-validation-for="PaymentId" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsPaid" /> @Html.DisplayNameFor(model => model.IsPaid)
                </label>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="RefundId" class="control-label"></label>
                <input asp-for="RefundId" class="form-control" />
                <span asp-validation-for="RefundId" class="text-danger"></span>
            </div>
            <div>
                <p>Przedmioty:</p>
                <table id="itemWithJS">
                    @for (int i = 0; i < Model.OrderItems.Count; i++)
                    {
                        <tr id="@i">
                            <td>
                                <input name="Item" value="@Model.OrderItems[i].ItemName" class="form-control valid" readonly style="width: 250px;position:static; " />
                                <input type="hidden" name="OrderItems[@i].ItemId" value="@Model.OrderItems[i].ItemId" class="col-sm-2 col-form-label" />
                                <input type="hidden" name="OrderItems[@i].OrderId" class="form-control" value="@Model.Id" />
                                <input type="hidden" name="OrderItems[@i].Id" class="form-control" value="@Model.OrderItems[i].Id" />
                            </td>
                            <td>
                                <a><i onclick="AddQuantity(this.id)" id="OrderItems[@i].ItemOrderQuantity" class="fas fa-plus-circle ml-2 fa_custom"></i></a>
                                <input id="ItemQuantity[@i]" name="@Model.OrderItems[i].ItemOrderQuantity" value="@Model.OrderItems[i].ItemOrderQuantity" readonly style="width: 45px;" />
                                <a><i onclick="RemoveQuantity(this.id)" class="fa fa-minus-circle ml-2 fa_custom" id="OrderItems[@i].ItemOrderQuantity"></i></a>
                                <button onclick="DeleteItem(this.id)" id="@i" type="button" class="btn btn-danger delete">Usuń</button>
                            </td>
                        </tr>
                    }
                </table>
            </div>
            <div>
                <label>Kod promocyjny</label>
                <input type="text" asp-for="RefCode" />
            </div>
            <table id="newrow" style="display:none;">
                <tr id="%">
                    <td>
                        <input name="Item" value="itemek" class="form-control valid" readonly style="width: 250px;position:static; " />
                        <input type="hidden" name="OrderItems[#].ItemId" value="wartosc" class="col-sm-2 col-form-label" />
                        <input type="hidden" name="OrderItems[#].OrderId" class="form-control" value="@Model.Id" />
                        <input type="hidden" name="OrderItems[#].Id" class="form-control" value="0" />
                    </td>
                    <td id="buttonDelete" style="position:relative; top:0px;">
                        <a><i onclick="AddQuantity(this.id)" id="OrderItems[#].ItemOrderQuantity" class="fas fa-plus-circle ml-2 fa_custom"></i></a>
                        <input id="ItemQuantity[#]" name="OrderItems[#].ItemOrderQuantity" value="ilosc" readonly style="width: 45px;" />
                        <a><i onclick="RemoveQuantity(this.id)" class="fa fa-minus-circle ml-2 fa_custom" id="OrderItems[#].ItemOrderQuantity"></i></a>
                        <button onclick="DeleteItem(this.id)" id="#" type="button" class="btn btn-danger delete">Usuń</button>
                    </td>
                </tr>
            </table>
            <!--NEW ITEM -->
            <div>
                <select id="ItemsMain" style="display:none;" asp-items="@(new SelectList(Model.Items,"Id", "Name"))" class="custom-select"></select>
                <select id="Items" name="Items" asp-items="@(new SelectList(Model.Items,"Id", "Name"))" class="custom-select" data-val="true"></select>
                <button type="button" id="add" class="btn btn-info">Wybierz przedmiot</button>
                <select id="ItemsWithCosts" style="display:none;" name="ItemsCost" asp-items="@(new SelectList(Model.Items, "Id", "Cost"))" class="custom-select"></select>
                <input id="indexer" type="hidden" value="0" />
            </div>
            <table id="RefreshCost">
                <tr>
                    @if (Model.CustomerId > 0)
                    {
                        <td>
                            Cena <input id="CalcCost" name="CostToConvert" value="@Model.Cost" readonly style="width: 250px;position:static; " />
                        </td>
                    }
                </tr>
            </table>
            <div class="form-group">
                <input type="submit" value="Utwórz" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-controller="Item" asp-action="Index">Wróć do listy przedmiotów</a>
</div>

@section Scripts {

    <script type="text/javascript">
        var form = $('form');
        var table = $('#itemWithJS');
        var newrow = $('#newrow');
        let index = document.getElementById("indexer").value;
        var elementOfItemTag = document.getElementById("Items");
        var selectedIndexItemTags = 0;
        var copyOfItemTags = elementOfItemTag;
        var selectedIndex;
        var selectedValue;
        var selectedTableRowInTags;
        var dictOfDeletedValues = {};
        var listIdTags = [];

        $(document).ready(function () {
            if ($('#itemWithJS tr').length > 0) {
                var valueInQuantity = parseInt($('#itemWithJS tr')[0].cells[1].childNodes[3].value); // get value quantity
                //$('#itemWithJS tr')[i];// list of table rows
                var listOfTd = $('#itemWithJS tr');
                console.log($('#itemWithJS tr')[0].children[0].children[1].value); // id of element
                console.log(document.getElementById('ItemsWithCosts').children); // list of elements
                var itemsCostWithIds = document.getElementById('ItemsWithCosts').children;
                var cost = 0;//CalcCost
                console.log("itemsCostWithIds");
                console.log(itemsCostWithIds);

                const format = (num, decimals) => num.toLocaleString('pl-PL', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                });

                for (i = 0; i < listOfTd.length; i++) {
                    var itemId = $('#itemWithJS tr')[i].children[0].children[1].value;
                    console.log("itemId");
                    console.log(itemId);
                    var valueInQuantity = parseInt($('#itemWithJS tr')[i].cells[1].childNodes[3].value);
                    for (j = 0; j < itemsCostWithIds.length; j++) {
                        if (itemsCostWithIds[j].value == itemId) {
                            console.log(itemsCostWithIds[j].value);
                            console.log(itemsCostWithIds[j].text);
                            cost += Number(itemsCostWithIds[j].text.replace(",", ".")) * Number(valueInQuantity);
                            console.log(itemsCostWithIds[j]);
                            console.log(itemId);
                            console.log(valueInQuantity);
                        }
                    }
                }
                cost = format(cost);
                document.getElementById('CalcCost').value = cost;
            }
        });

        $('#add').click(function () {
            selectedIndex = copyOfItemTags.options[copyOfItemTags.selectedIndex].index;
            selectedValue = copyOfItemTags.options[copyOfItemTags.selectedIndex].value;
            selectedText = copyOfItemTags.options[copyOfItemTags.selectedIndex].text;
            console.log(selectedIndex);
            console.log(selectedValue);
            console.log(selectedText);
            var valueOfItemTag = selectedValue;
            var cloneTableRow = newrow.find('tr').clone();

            cloneTableRow.attr('id', index);
            cloneTableRow.attr("id", index).find("#Item");
            cloneTableRow.html($(cloneTableRow).html().replace(/\[#\]/g, '[' + index + ']'));
            cloneTableRow.html($(cloneTableRow).html().replace(/"%"/g, '"' + index + '"'));
            cloneTableRow.html($(cloneTableRow).html().replace(/"wartosc"/g, '"' + valueOfItemTag + '"'));
            cloneTableRow.html($(cloneTableRow).html().replace(/"itemek"/g, '"' + selectedText + '"'));
            cloneTableRow.html($(cloneTableRow).html().replace(/"ilosc"/g, '"' + 1 + '"'));
            table.append(cloneTableRow);
            form.data('validator', null);
            index = parseInt(index) + 1;
            $.validator.unobtrusive.parse(form);
            if (selectedIndex > -1) {
                //var standardValue = copyOfItemTags.attributes.value.ownerElement.children[selectedIndex].value;
                dictOfDeletedValues[index] = selectedValue;
                copyOfItemTags.remove(selectedIndex);
            }
            IncreaseCost();
        });

        $(document).on('change', 'select', function () {
            console.log("Jestem w onchange -> select")
            selectedIndex = (this).index;
            selectedValue = (this).value;
            console.log(selectedValue);
            console.log(this.children);
            var collectionInSelectList = this.children;

            for (i = 0; i < collectionInSelectList.length; i++) {
                console.log("jestem w forze");
                if (collectionInSelectList[i].value == selectedValue) {
                    selectedIndex = i;
                    
                }
            }
        });

        $('#itemWithJS').on('click', '.delete', function () {
            var valuesFromSelect = document.getElementById('Items');
            selectedTableRowInTags = (this).parentNode.parentNode.attributes.id.value;
            var assignedValuesQuantity = [];
            var assignedValuesOrderId = [];
            var assignedValuesItemName = [];
            var assignedValuesItemId = [];

            if ($('#itemWithJS tr').length > 0) {
                $("#itemWithJS tr").each(function () {
                    if (this.id) {
                        listIdTags.push(this.id);
                    }
                });
            }

            $(this).closest('tr').remove();// this stay
            var id = $(this).closest('tr').attr("id");
            var assignedValues = [];
            var collectionValues = $('#itemWithJS')[0].children;
            for (i = 0; i < collectionValues.length; i++) {
                assignedValuesQuantity[i] = collectionValues[0].parentNode.children[i].children[1].children[1].value;
                assignedValuesOrderId[i] = collectionValues[0].parentNode.children[i].children[0].children[2].value;
                assignedValuesItemName[i] = collectionValues[0].parentNode.children[i].children[0].children[0].value;
                assignedValuesItemId[i] = collectionValues[0].parentNode.children[i].children[0].children[1].attributes[2].value;
                assignedValues[i] = collectionValues[i].children[0].children[1].value;
            }

            listIdTags.splice(id, 1);
            for (i = 0; i < listIdTags.length; i++) {
                console.log(listIdTags[i]);
            }
            Update(listIdTags);
            console.log("After update\n========");
            for (i = 0; i < listIdTags.length; i++) {
                console.log(listIdTags[i]);
            }

            var allValues = document.getElementById('ItemsMain');
            $('#Items').empty();

            for (i = 0; i < allValues.length; i++) {
                $('#Items')
                    .append($("<option></option>").attr("value", allValues[i].value).text(allValues[i].text));
            }
            //-------------------------CREATE NEW TABLE ROWS-----------------------------------------
            $('#itemWithJS').empty();

            for (i = 0; i < listIdTags.length; i++) {
                var cloneTableRow = newrow.find('tr').clone();
                cloneTableRow.attr('id', listIdTags[i]);
                cloneTableRow.attr("id", listIdTags[i]).find("#Item");
                cloneTableRow.html($(cloneTableRow).html().replace(/\[#\]/g, '[' + listIdTags[i] + ']'));
                cloneTableRow.html($(cloneTableRow).html().replace(/"%"/g, '"' + listIdTags[i] + '"'));
                cloneTableRow.html($(cloneTableRow).html().replace(/"wartosc"/g, '"' + assignedValuesItemId[i] + '"'));
                cloneTableRow.html($(cloneTableRow).html().replace(/"itemek"/g, '"' + assignedValuesItemName[i] + '"'));
                cloneTableRow.html($(cloneTableRow).html().replace(/"ilosc"/g, '"' + assignedValuesQuantity[i] + '"'));
                table.append(cloneTableRow);
                document.getElementById("ItemQuantity[" + listIdTags[i] + "]").value = assignedValuesQuantity[i];
            }
            //-------------------------CREATE NEW TABLE ROWS-----------------------------------------

            //----------------------DELETE CHOSEN OPTIONS--------------------
            copyOfItemTags = document.getElementById("Items");
            for (i = 0; i < assignedValues.length; i++) {
                 //   removeSelectOption(i, copyOfItemTags);
                    removeSelectOption(assignedValues[i], copyOfItemTags);                
            }
            //----------------------DELETE CHOSEN OPTIONS--------------------
            index = listIdTags.length;
            console.log("index=" + index);
            listIdTags = [];
            DecreaseCost();
        });

        function Update(listIdTags) {
            for (j = 0; j < listIdTags.length; j++) {
                if (listIdTags[j] != j) {
                    this.listIdTags[j] = j;
                }
            }
        }

        function removeSelectOption(valueToDelete, selectList) {
            for (var i = selectList.length - 1; i >= 0; i--) {
                if (selectList.options[i].value == valueToDelete) {
                    selectList.remove(i);
                    console.log(" selectList.options[i].value == valueToDelete.value");
                    console.log(valueToDelete);
                }
                console.log("loop in RemoveSelectOption");
            }
        }

        function AddQuantity(id) {
            console.log("Jestem w plusie");
            console.log("id=" + id);
            selectedTableRowInTags = event.target.id.replace("OrderItems[", "").replace("].ItemOrderQuantity", "");
            console.log("selectedTableRowInTags=" + selectedTableRowInTags);
          //  console.log($('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value);
            console.log("after add");
            console.log($('#itemWithJS tr'));
            var valueInQunatity = parseInt($('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value);
            valueInQunatity += 1;
            $('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value = "";
            $('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value = valueInQunatity;
            document.getElementById("ItemQuantity[" + selectedTableRowInTags +"]").value = valueInQunatity;
          //  console.log($('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value);
            IncreaseCost();
        }

        function RemoveQuantity(id) {
            console.log("Jestem w minusie");
         //   console.log("id=" + id);
            selectedTableRowInTags = event.target.id.replace("OrderItems[", "").replace("].ItemOrderQuantity", "");
      //      console.log("selectedTableRowInTags=" + selectedTableRowInTags);
       //     console.log($('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value);
            var valueInQunatity = parseInt($('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value);
       //     console.log("after delete");
            valueInQunatity -= 1;
            if (valueInQunatity > 0) {
                $('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value = "";
                $('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value = valueInQunatity;
           //     document.getElementById("ItemQuantity").value = valueInQunatity;
                console.log($('#itemWithJS tr')[selectedTableRowInTags].cells[1].childNodes[3].value);
            }
            DecreaseCost();
        }

        function DeleteItem(id) {
            console.log("Jestem w delete");
            console.log("id=" + id);
        }
        /******************************************************************
         *                                                                *
         *                    SECTION FOR REFRESH COST                    *
         *                                                                *
         /*****************************************************************/

        var form2 = $('form');
        var table2 = $('#RefreshCost');

        function IncreaseCost() {
            console.log("Jestem w increase");
            console.log($('#RefreshCost tr td'));
            console.log($('#RefreshCost tr td')[0]);
            console.log($('#RefreshCost tr td')[0].children);
            console.log($('#RefreshCost tr td')[0].children[0]);
            console.log($('#RefreshCost tr td')[0].children[0].value);
            var valueInQuantity = parseInt($('#itemWithJS tr')[0].cells[1].childNodes[3].value); // get value quantity
            console.log(valueInQuantity);
            console.log($('#itemWithJS tr'));// list of table rows
            //$('#itemWithJS tr')[i];// list of table rows
            var listOfTd = $('#itemWithJS tr');
            console.log($('#itemWithJS tr')[0].children[0].children[1].value); // id of element
            console.log(document.getElementById('ItemsWithCosts').children); // list of elements
            var itemsCostWithIds = document.getElementById('ItemsWithCosts').children;
            var cost = 0;//CalcCost
            console.log("itemsCostWithIds");
            console.log(itemsCostWithIds);

            const format = (num, decimals) => num.toLocaleString('pl-PL', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
            });

            for (i = 0; i < listOfTd.length; i++) {
                var itemId = $('#itemWithJS tr')[i].children[0].children[1].value;
                console.log("itemId");
                console.log(itemId);
                var valueInQuantity = parseInt($('#itemWithJS tr')[i].cells[1].childNodes[3].value);
                for (j = 0; j < itemsCostWithIds.length; j++) {
                    if (itemsCostWithIds[j].value == itemId) {
                        console.log(itemsCostWithIds[j].value);
                        console.log(itemsCostWithIds[j].text);
                        cost += Number(itemsCostWithIds[j].text.replace(",", ".")) * Number(valueInQuantity);
                        console.log(itemsCostWithIds[j]);
                        console.log(itemId);
                        console.log(valueInQuantity);
                    }
                }
            }
            cost = format(cost);
            console.log(cost);
        //    document.getElementById('CalcCost').value = cost.replace(",", "").replace(".", ",");
            document.getElementById('CalcCost').value = cost;
        }

        function DecreaseCost() {
            console.log("Jestem w decrease");
            var valueInQuantity = 0;

            if ($('#itemWithJS tr').length > 0) {
                valueInQuantity = parseInt($('#itemWithJS tr')[0].cells[1].childNodes[3].value); // get value quantity
            }
            
            //$('#itemWithJS tr')[i];// list of table rows
            var listOfTd = $('#itemWithJS tr');
            var itemsCostWithIds = document.getElementById('ItemsWithCosts').children;
            var cost = 0;//CalcCost

            const format = (num, decimals) => num.toLocaleString('pl-PL', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
            });

            for (i = 0; i < listOfTd.length; i++) {
                var itemId = $('#itemWithJS tr')[i].children[0].children[1].value;
                console.log("itemId");
                console.log(itemId);
                var valueInQuantity = parseInt($('#itemWithJS tr')[i].cells[1].childNodes[3].value);
                for (j = 0; j < itemsCostWithIds.length; j++) {
                    if (itemsCostWithIds[j].value == itemId) {
                        console.log(itemsCostWithIds[j].value);
                        console.log(itemsCostWithIds[j].text);
                        cost += Number(itemsCostWithIds[j].text.replace(",", ".")) * Number(valueInQuantity);
                        console.log(itemsCostWithIds[j]);
                        console.log(itemId);
                        console.log(valueInQuantity);
                    }
                }
            }
            cost = format(cost);
            console.log(cost);
            document.getElementById('CalcCost').value = cost;
        }

    </script>
    <style type="text/css">
        .fa_custom {
            color: #0077cc
        }
    </style>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


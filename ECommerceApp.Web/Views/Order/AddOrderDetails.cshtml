@model ECommerceApp.Application.ViewModels.Order.NewOrderVm

@{
    ViewData["Title"] = "AddOrderDetails";
}

<h1>Dodawnie szczegółów zamówienia</h1>

<hr />
<div class="row">
    <div class="col-lg-6">
        <form id="orderForm" asp-action="AddOrderDetails" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input data-name="Id" type="hidden" asp-for="Id" class="form-control" />
            <input type="hidden" asp-for="UserId" class="form-control" />
            <div class="form-group">
                <label asp-for="Number" class="control-label">Numer zamówienia</label>
                <input asp-for="Number" class="form-control" readonly />
                <span asp-validation-for="Number" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="Cost" class="control-label"></label>
                <input asp-for="Cost" class="form-control" />
                <span asp-validation-for="Cost" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Ordered" class="control-label">Zamówiono dnia o godzinie</label>
                <input asp-for="Ordered" class="form-control" readonly />
                <span asp-validation-for="Ordered" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="Delivered" class="control-label"></label>
                <input asp-for="Delivered" class="form-control" />
                <span asp-validation-for="Delivered" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsDelivered" /> @Html.DisplayNameFor(model => model.IsDelivered)
                </label>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="CouponUsedId" class="control-label"></label>
                <input asp-for="CouponUsedId" class="form-control" />
                <span asp-validation-for="CouponUsedId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CustomerId" class="control-label">Klient</label>
                <input value="@ViewBag.CustomerInformation" class="form-control" readonly />
                <span asp-validation-for="CustomerId" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="PaymentId" class="control-label"></label>
                <input asp-for="PaymentId" class="form-control" />
                <span asp-validation-for="PaymentId" class="text-danger"></span>
            </div>
            <div style="display:none;" class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsPaid" /> @Html.DisplayNameFor(model => model.IsPaid)
                </label>
            </div>
            <div style="display:none;" class="form-group">
                <label asp-for="RefundId" class="control-label"></label>
                <input asp-for="RefundId" class="form-control" />
                <span asp-validation-for="RefundId" class="text-danger"></span>
            </div>
            <div>
                <label>Kod promocyjny</label>
                <input type="text" asp-for="RefCode" class="form-control" />
            </div>
            <div class="mt-2 mb-2">
                <p>Przedmioty:</p>
                <table id="itemWithJS">
                    @for (int i = 0; i < Model.OrderItems.Count; i++)
                    {
                        <tr id="@i">
                            <td>
                                <input name="Item" value="@Model.OrderItems[i].ItemName" class="form-control valid" readonly style="width: 250px;position:static; " />
                                <input id="itemId" type="hidden" name="OrderItems[@i].ItemId" value="@Model.OrderItems[i].ItemId" class="col-sm-2 col-form-label" />
                                <input id="orderId" type="hidden" name="OrderItems[@i].OrderId" class="form-control" value="@Model.Id" />
                                <input id="orderItemId" type="hidden" name="OrderItems[@i].Id" class="form-control" value="@Model.OrderItems[i].Id" />
                            </td>
                            <td>
                                <a><i onclick="AddQuantity(this.id)" id="OrderItems[@i].ItemOrderQuantity" class="fas fa-plus-circle ml-2 fa_custom add-quantity"></i></a>
                                <input id="ItemQuantity[@i]" name="@Model.OrderItems[i].ItemOrderQuantity" value="@Model.OrderItems[i].ItemOrderQuantity" readonly style="width: 45px;" class="form-control" />
                                <a><i onclick="RemoveQuantity(this.id)" class="fa fa-minus-circle ml-2 fa_custom remove-quantity" id="OrderItems[@i].ItemOrderQuantity"></i></a>
                                <button id="@i" type="button" class="btn btn-danger delete">Usuń</button>
                            </td>
                        </tr>
                    }
                </table>
            </div>
            <div>
                <select id="Items" name="Items" asp-items="@(new SelectList(Model.Items,"Id", "Name"))" class="custom-select" data-val="true"></select>
                <button type="button" id="add" class="btn btn-info">Wybierz przedmiot</button>
                <select id="ItemsWithCosts" style="display:none;" name="ItemsCost" asp-items="@(new SelectList(Model.Items, "Id", "Cost"))" class="custom-select"></select>
            </div>
            <table id="RefreshCost" class="mt-2 mb-2">
                <tr>
                    @if (Model.CustomerId > 0)
                    {
                        <td>
                            Cena <input id="CalcCost" name="CostToConvert" value="@Model.Cost" readonly style="width: 250px;position:static;" class="form-control" />
                        </td>
                    }
                </tr>
            </table>
            <div class="form-group mt-2 mb-2">
                <input type="submit" value="Utwórz" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-controller="Item" asp-action="Index">Wróć do listy przedmiotów</a>
</div>

@section Scripts {

    <script type="text/javascript">
        let orderItems = [];
        const orderId = document.querySelector('[data-name="Id"]').value;
        const itemCosts = [];
        const format = (num, decimals) => num.toLocaleString('pl-PL', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
        });

        var table = $('#itemWithJS');
        var itemsSelector = document.getElementById("Items");
        var selectedIndex;
        var selectedValue;

        $(document).ready(function () {
            initView();
        });

        $('#add').click(function () {
            const tableRows = $('#itemWithJS tr');
            const elements = $('#itemWithJS tr').length;
            selectedIndex = itemsSelector.options[itemsSelector.selectedIndex].index;
            selectedValue = itemsSelector.options[itemsSelector.selectedIndex].value;
            selectedText = itemsSelector.options[itemsSelector.selectedIndex].text;
            const orderItem = { name: selectedText, itemId: selectedValue, orderId, orderItemId: 0, quantity: 1 }
            orderItems.push(orderItem);
            const row = createOrderItemRow(orderItem, elements);
            table.append(row);
            if (selectedIndex > -1) {
                itemsSelector.remove(selectedIndex);
            }
            calculateCosts();
            selectedIndex = 0;
        });

        $(document).on('change', 'select', function () {
            selectedIndex = (this).index;
            selectedValue = (this).value;
            var collectionInSelectList = this.children;

            for (i = 0; i < collectionInSelectList.length; i++) {
                if (collectionInSelectList[i].value == selectedValue) {
                    selectedIndex = i;
                    
                }
            }
        });

        $('#itemWithJS').on('click', '.delete', function () {
            var valuesFromSelect = document.getElementById('Items');
            const selectedTableRow = (this).attributes.id.value;
            const orderItem = orderItems[selectedTableRow];
            $('#Items')
                .append($("<option></option>").attr("value", orderItem.itemId).text(orderItem.name));

            orderItems = orderItems.filter(oi => oi.itemId !== orderItem.itemId);
            $(table).empty();

            for (let i = 0; i < orderItems.length; i++) {
                const row = createOrderItemRow(orderItems[i], i);
                table.append(row);
            }

            calculateCosts();
            selectedIndex = 0;
        });

        $('#itemWithJS').on('click', '.add-quantity', function () {
            const index = this.id.replace('OrderItems[', '').split(']')[0];
            const quantityElement = this.parentNode.parentNode.querySelector('[id="ItemQuantity[' + index + ']"]');
            orderItems[index].quantity += 1;
            quantityElement.value = orderItems[index].quantity;
            calculateCosts();
        });

        $('#itemWithJS').on('click', '.remove-quantity', function () {
            const index = this.id.replace('OrderItems[', '').split(']')[0];
            const quantityElement = this.parentNode.parentNode.querySelector('[id="ItemQuantity[' + index + ']"]');
            if (orderItems[index].quantity === 1) {
                return;
            }

            orderItems[index].quantity -= 1;
            quantityElement.value = orderItems[index].quantity;
            calculateCosts();
        });
        
        function initView() {
            initOrderItems();
            initItemCosts();
            calculateCosts();
        }

        function calculateCosts() {
            let cost = 0;
            for (const orderItem of orderItems) {
                const itemCost = itemCosts.find(i => i.itemId === orderItem.itemId);
                cost += Number(itemCost?.cost ?? 0) * orderItem.quantity;
            }
            cost = format(cost);
            document.getElementById('CalcCost').value = cost;
        }

        function initItemCosts() {
            var itemsCostWithIds = document.getElementById('ItemsWithCosts').options;
            for (const item of itemsCostWithIds) {
                itemCosts.push({ itemId: item.value, cost: Number(item.textContent.replace(",", ".")) });
            }
        }

        function initOrderItems() {
            const tableRows = $('#itemWithJS tr');
            if (tableRows.length === 0) {
                return;
            }

            for (let i = 0; i < tableRows.length; i++) {
                const name = tableRows[i].querySelector('[name="Item"]').value;
                const itemId = tableRows[i].querySelector('#itemId').value;
                const orderId = tableRows[i].querySelector('#orderId').value;
                const orderItemId = tableRows[i].querySelector('#orderItemId').value;
                const quantity = tableRows[i].querySelector('#ItemQuantity[' + i + ']').value;
                orderItems.push({ name, itemId, orderId, orderItemId, quantity });
            }
        }

        function createOrderItemRow(orderItem, index) {
            const row = document.createElement('tr');
            const dataTag = document.createElement('td');

            const itemNameInput = document.createElement('input');
            itemNameInput.name = "Item";
            itemNameInput.value = orderItem.name;
            itemNameInput.className = "form-control valid";
            itemNameInput.readOnly = true;
            itemNameInput.style = "width: 250px;position:static;";
            dataTag.appendChild(itemNameInput);

            const itemIdInput = document.createElement('input');
            itemIdInput.value = orderItem.itemId;
            itemIdInput.setAttribute("id", "itemId");
            itemIdInput.type = "hidden";
            itemIdInput.name = "OrderItems[" + index + "].ItemId";
            dataTag.appendChild(itemIdInput);

            const orderIdInput = document.createElement('input');
            orderIdInput.value = orderItem.orderId
            orderIdInput.setAttribute("id", "orderId");
            orderIdInput.type = "hidden";
            orderIdInput.name = "OrderItems[" + index + "].OrderId";
            dataTag.appendChild(orderIdInput);

            const idInput = document.createElement('input');
            idInput.value = document.querySelector('[data-name="Id"]')?.value ?? 0;
            idInput.setAttribute("id", "orderItemId");
            idInput.type = "hidden";
            idInput.name = "OrderItems[" + index + "].Id";
            dataTag.appendChild(idInput);

            const dataButton = document.createElement('td');
            const addQuantityAnchor = document.createElement('a');
            const addIcon = document.createElement('i');
            addIcon.setAttribute("id", "OrderItems[" + index + "].ItemOrderQuantity");
            addIcon.className = "fas fa-plus-circle ml-2 fa_custom add-quantity";
            addQuantityAnchor.appendChild(addIcon);
            const inputQuantity = document.createElement('input');
            inputQuantity.setAttribute("id", "ItemQuantity[" + index + "]");
            inputQuantity.name = "OrderItems[" + index + "].ItemOrderQuantity";
            inputQuantity.setAttribute("readonly", true);
            inputQuantity.style = "width: 45px; display: inline !important";
            inputQuantity.className = "form-control ml-2 mr-2";
            inputQuantity.value = orderItem.quantity;
            const deleteQuantityAnchor = document.createElement('a');
            const deleteIcon = document.createElement('i');
            deleteIcon.setAttribute("id", "OrderItems[" + index + "].ItemOrderQuantity");
            deleteIcon.className = "fas fa-minus-circle mr-2 fa_custom remove-quantity";
            deleteQuantityAnchor.appendChild(deleteIcon);
            const button = buttonTemplate.createButton('Usuń', 'btn btn-danger delete', undefined, 'button', [{ key: "id", value: index }]);
            button.id = index;
            dataButton.id = "buttonDelete";
            dataButton.style = "position:relative; top:0px;"
            dataButton.appendChild(addQuantityAnchor);
            dataButton.appendChild(inputQuantity);
            dataButton.appendChild(deleteQuantityAnchor);
            dataButton.appendChild(button);

            row.appendChild(dataTag);
            row.appendChild(dataButton);
            return row;
        }

        function validateQuantity(control) {

            if (siblingSpan[0]) {
                siblingSpan.text(text);
            } else {
                $('#' + context.attributes.id.value)[0].parentElement.appendChild(createErrorSpanInner(text));
            }
        }
    </script>
    <style type="text/css">
        .fa_custom {
            color: #0077cc;
            cursor: pointer;
        }
    </style>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

